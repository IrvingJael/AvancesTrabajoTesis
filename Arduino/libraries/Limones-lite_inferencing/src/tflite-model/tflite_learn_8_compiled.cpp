/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.08.2024 23:18:23

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 20786, -33610, -28691, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00023456895723938942, 0.00016800071171019226, 0.00018487198394723237, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 66,9,104,-86,-43,12,22,17,-17,60,15,-31,-20,-58,-32,24,-39,29,57,127,-47,-30,46,-57,-88,57,-48,73,103,22,-10,3, 
  /* [1][0][][] */ 52,-37,-84,22,-8,126,-19,-15,127,-89,3,-95,-61,106,56,-51,90,-51,-6,-127,-114,27,104,75,18,15,2,-47,-98,-55,-5,-24, 
  /* [2][0][][] */ -29,73,-79,75,80,-40,-28,100,85,23,116,-8,-91,-76,84,106,-75,-71,29,-110,68,109,-43,-74,85,-48,-15,-127,-8,-71,71,-20, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0045774644240736961, 0.0032784272916615009, 0.003607659600675106, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -233, 223, 188, 165, -263, 149, -119, 152, 45, 1217, 169, 498, -284, -108, 310, 192, -215, -380, 120, 607, -333, 118, -113, -159, -8, -267, -439, 861, 756, -219, 52, -215, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.4319731387076899e-05, 4.4397696910891682e-05, 4.5842862164136022e-05, 4.6122320782160386e-05, 4.5418222725857049e-05, 4.9188442062586546e-05, 5.2154726290609688e-05, 5.2114242862444371e-05, 5.1454120693961158e-05, 4.6666689740959555e-05, 4.2009363824035972e-05, 8.9526016381569207e-05, 4.2250911064911634e-05, 4.6612647565780208e-05, 5.0325485062785447e-05, 4.8038298700703308e-05, 4.3570438720053062e-05, 5.6196004152297974e-05, 5.9207755839452147e-05, 5.09486417286098e-05, 4.7266647015931085e-05, 4.5506370952352881e-05, 4.3201082007726654e-05, 4.4536252971738577e-05, 6.3557461544405669e-05, 4.764807817991823e-05, 4.3210384319536388e-05, 5.6240984122268856e-05, 7.9562683822587132e-05, 5.1506060117390007e-05, 4.3285675928927958e-05, 5.7888071751222014e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -47,-52,96,3,102,-12,-91,-112,59,-95,-114,-3,47,3,-39,45,-61,-33,-69,-54,-82,-108,-3,98,-106,4,72,-52,99,-5,-28,-80,83,-70,-97,61,-113,-81,-102,16,69,-91,-111,87,51,-118,98,-25,17,-63,-53,84,-79,-57,-97,99,14,43,106,-113,-87,81,-57,40,9,12,61,80,56,78,63,-127,83,-94,36,74,-109,5,-65,26,52,8,73,-15,-61,-51,-93,94,16,106,-12,-115,13,59,13,3, 
  /* [1][0][][] */ -31,34,-62,2,-28,79,39,19,80,-81,-96,107,85,-27,28,68,108,-47,35,114,-48,0,41,30,51,17,-41,111,14,19,109,-58,63,102,-14,27,56,63,7,-57,-64,13,-12,-88,-33,35,-42,-48,-19,-82,127,66,23,82,-61,-58,26,84,104,84,-78,111,-65,-71,-52,32,79,47,109,42,18,17,-116,98,-44,52,71,-39,-36,68,-78,84,-53,-94,32,118,-66,-77,75,82,90,23,81,93,43,14, 
  /* [2][0][][] */ 73,35,-61,95,-83,-68,86,101,-81,88,-30,103,62,-9,85,-99,-54,-26,29,41,-82,-10,105,24,-23,72,102,2,-66,54,87,99,-64,-20,-77,-102,-83,111,99,-31,-91,-74,18,4,-58,126,2,-63,97,22,125,-70,-56,36,26,60,-68,80,-86,1,5,60,-67,37,66,48,49,77,-88,66,8,-76,43,-75,22,25,-59,-23,6,17,35,-81,25,-36,8,-89,-13,-34,95,127,-32,18,-44,-49,-20,-54, 
  /* [3][0][][] */ 49,5,47,-31,-19,75,-98,31,38,31,65,20,112,96,68,14,109,102,-46,46,109,-74,-50,-101,-5,-87,-68,114,57,-35,85,5,-40,-21,-16,-10,-74,-31,46,63,-31,-71,-86,3,58,15,-70,-78,70,-48,-22,14,113,65,91,-126,-100,-80,-77,-39,-115,39,-8,102,65,-30,-50,-16,-10,-57,15,119,17,-86,62,-37,44,102,98,-53,-73,-113,20,97,32,54,-31,-110,-73,34,10,-127,106,-73,-90,41, 
  /* [4][0][][] */ 38,94,-3,44,-9,-43,23,7,41,89,-14,49,14,-39,-19,-66,-24,-13,-81,18,87,-88,81,16,-20,-7,52,-57,-58,43,-67,-47,70,115,0,-100,-50,-22,-111,51,-64,-60,-72,-92,23,79,8,41,20,-27,-78,-83,-88,64,-81,4,14,-67,24,18,-30,-78,-35,-57,-49,38,-2,-25,32,-91,-93,-74,-64,19,98,47,42,-21,-13,-47,-3,-55,-127,-27,-8,67,92,-9,-127,-85,39,46,25,92,-94,-9, 
  /* [5][0][][] */ 56,-72,71,66,61,-99,27,19,85,-127,1,-58,-13,93,27,38,61,67,-71,98,31,47,21,-22,-84,-49,-6,-76,49,37,5,-93,-35,9,-56,22,-92,-37,12,26,-76,-36,27,84,-43,18,27,-48,-87,114,-11,28,36,28,15,-40,94,77,-86,-25,32,-52,44,-45,-25,92,-21,27,65,-16,100,-49,-29,63,-22,-60,28,-36,14,66,103,35,12,89,-67,75,5,40,67,-100,111,67,-6,11,40,-101, 
  /* [6][0][][] */ 21,-39,90,61,-88,-61,-1,60,-14,-66,7,-73,52,52,96,-97,34,4,-3,65,-58,-97,89,49,-55,-68,-4,-50,-20,-127,43,-52,-68,-95,-34,-87,-10,40,-88,73,78,44,19,-13,-87,95,-60,-35,-67,9,-6,-52,41,-42,77,3,2,-1,-70,95,-67,0,66,-65,-48,55,83,-26,74,-8,-90,-3,47,-66,-74,-36,-76,-85,-45,-31,30,-16,49,-21,-57,-64,-26,-83,74,85,80,53,-33,-46,76,-26, 
  /* [7][0][][] */ 97,59,-25,-36,-42,99,-14,2,93,16,-77,18,61,-73,40,65,47,12,-1,99,42,33,0,74,-43,85,34,53,-61,108,-10,35,26,24,50,83,-82,70,5,-18,73,-57,75,60,38,-8,68,-91,48,-41,-127,-51,-9,80,22,5,96,-76,37,-42,-16,-4,70,-81,-55,-47,59,23,-84,25,57,80,66,27,53,54,-55,50,-79,33,77,-31,-23,-49,75,32,-89,68,66,2,74,52,-41,-32,2,-46, 
  /* [8][0][][] */ -12,30,-33,-82,84,34,-61,-30,-6,33,38,87,9,-34,-74,-57,-52,87,-55,33,24,-19,72,93,-87,79,41,70,-49,48,-80,92,83,-23,37,-1,104,-6,-17,65,61,93,-97,-100,-23,-33,-33,87,21,-56,-88,2,-37,14,-28,-121,41,127,-59,95,85,37,52,118,-23,-39,-17,85,-66,37,34,13,65,60,13,22,-27,93,71,55,36,63,-110,-71,22,39,66,-35,32,-46,-65,77,-55,-86,-55,37, 
  /* [9][0][][] */ 50,10,124,64,59,-107,-20,-38,57,92,19,64,-6,-58,-54,-3,26,1,-88,-78,13,119,-77,-65,127,-7,10,40,10,-68,-30,111,67,2,44,-24,-50,58,21,-33,82,-46,77,-41,107,59,-65,88,62,-13,14,-4,80,-98,-25,120,87,-91,58,7,-85,112,74,-68,-82,22,125,46,-19,120,113,-74,36,84,-84,-66,-85,-88,-15,84,38,47,115,59,-10,-61,40,-26,105,79,-42,108,108,13,93,2, 
  /* [10][0][][] */ -75,87,102,-73,9,116,112,29,31,47,26,-62,122,84,-35,17,-31,81,-101,-53,-22,33,64,-68,49,56,-119,-107,-44,110,-90,-82,94,105,116,76,-35,0,-19,42,-46,127,-111,-36,-109,-70,-35,-61,3,12,-16,18,81,35,-57,-67,-103,-13,72,-40,-31,82,123,62,123,-82,-96,-19,31,-13,-93,-55,82,75,-79,117,-17,72,72,15,82,-2,47,119,-101,76,105,-38,36,2,-2,-80,-47,-46,-44,-59, 
  /* [11][0][][] */ 74,28,-1,60,33,27,33,33,73,54,-31,50,60,-31,29,-22,-22,-44,60,9,34,47,20,-44,-49,-56,0,40,33,-20,38,9,-23,-23,27,39,-27,47,-9,-26,3,56,-21,14,-5,-10,-36,-27,53,36,127,29,-49,-45,16,18,0,-11,-7,-39,-30,47,30,28,76,45,-14,24,30,60,-27,-25,32,42,-21,36,-51,26,-14,61,-54,-9,2,-5,31,-25,13,-14,-38,24,6,-17,-50,-1,22,29, 
  /* [12][0][][] */ 39,57,-65,-1,61,-3,-40,40,-81,52,-18,4,-41,2,48,-94,-109,-47,-57,-98,26,-17,7,95,-92,-48,94,-113,87,-7,-48,119,-101,-81,-51,0,-15,-77,-23,40,116,28,-121,-46,-21,-89,-32,116,-54,-127,-51,96,17,-13,-84,125,-18,-98,48,56,68,106,-3,29,109,31,-52,126,61,90,33,60,79,108,-23,-15,-39,25,-124,-113,-66,97,55,8,-44,29,40,127,-96,-108,92,45,94,-12,30,66, 
  /* [13][0][][] */ 67,-57,92,79,105,113,76,27,57,-127,12,-35,60,72,54,-43,-108,-49,-67,48,61,-27,108,-46,-61,46,11,14,-80,-64,59,25,38,104,-14,33,-78,-33,-15,69,-56,75,-60,0,-49,23,-4,-38,35,112,-64,-103,-99,41,72,-91,-46,49,-53,-64,-17,111,-56,24,-43,-55,-88,81,-32,-27,86,2,-74,35,-71,-43,-72,61,76,-61,57,-90,76,12,-77,-94,91,119,-7,-62,-64,38,114,-66,40,-28, 
  /* [14][0][][] */ -61,-88,83,57,73,-2,-2,-127,-64,-60,66,84,-11,-57,-69,-65,-34,-34,15,42,-24,37,4,63,-89,-63,-8,39,-73,-53,-72,5,80,-46,-22,-19,91,88,7,-84,-12,-91,48,80,49,-110,46,-64,99,62,54,57,101,-41,-14,-12,-27,-6,57,93,-3,-63,-3,77,-101,3,75,-103,-57,-53,-69,88,1,86,44,-55,74,-87,58,8,60,-12,-83,-44,-88,-62,-106,100,111,14,89,-82,91,107,-4,71, 
  /* [15][0][][] */ 38,-19,-15,71,94,-71,59,-70,56,19,-58,19,118,3,-74,-94,86,4,-78,25,44,24,72,103,88,60,36,94,27,69,73,-84,10,9,-58,1,-52,104,127,-54,12,108,-31,-13,25,-69,-49,-65,-1,-63,9,37,-71,-92,-26,-15,64,36,4,104,-58,-56,2,101,-28,86,-57,10,-44,22,60,-56,12,-2,59,-86,-10,57,100,70,-71,56,-95,-39,-102,-25,-80,22,77,68,-99,-34,52,107,-80,120, 
  /* [16][0][][] */ -101,-1,96,-66,53,115,-54,14,43,25,-105,66,-37,-40,-59,-59,106,96,68,79,110,75,-41,48,-44,61,-61,58,-100,20,23,6,-105,84,60,58,-36,48,-80,-64,27,-43,57,81,53,102,104,-21,-55,-99,-23,101,-49,127,43,37,26,119,19,16,126,109,45,68,58,21,-39,90,41,77,-29,-7,38,88,60,80,11,95,-109,-13,21,-85,49,1,9,97,107,24,80,4,-9,107,79,-39,-106,-3, 
  /* [17][0][][] */ 23,-109,23,53,-9,-127,-57,-84,28,-57,59,24,83,40,-98,26,19,46,87,80,-71,-17,6,-46,5,67,-60,26,70,-42,-30,53,-37,-17,11,-13,-39,65,-71,-29,-85,-32,-8,-21,-1,-4,51,-121,48,107,-19,10,-18,61,65,-57,-121,59,-33,-89,43,-69,54,97,-59,-59,23,-87,-60,5,61,17,-8,-100,-78,44,103,-42,26,-53,17,-25,-60,-69,-91,40,61,-18,17,43,-71,-90,4,83,-5,17, 
  /* [18][0][][] */ -29,76,80,-36,-13,-127,-73,-4,-28,61,-69,-40,-39,34,49,-62,19,-23,10,-49,83,-28,20,-55,1,-68,-19,81,15,24,6,36,33,-2,-88,-77,-26,26,-52,60,-38,2,-33,-6,-92,-7,10,-2,12,-26,48,26,-85,21,-32,61,-56,23,-38,-78,66,58,18,24,-39,-106,-18,85,44,-52,-74,88,-98,-57,-54,-73,14,44,2,-43,-47,-5,-8,-50,71,-11,65,19,-77,-63,-48,84,71,-47,48,-8, 
  /* [19][0][][] */ 56,37,67,59,15,-78,98,127,95,-16,48,-13,-104,31,-9,64,66,-89,101,67,-19,84,-39,29,69,-48,35,-60,-66,-125,-27,65,72,-58,55,32,5,-12,-23,-73,81,-101,-41,36,3,60,102,-38,-16,13,4,52,-38,-1,56,115,16,51,7,-22,47,-28,80,33,-54,13,-4,22,29,69,54,-62,-27,-86,-58,-60,-30,-90,26,112,53,-70,-6,64,-51,4,17,-8,82,68,-5,86,-36,115,89,-3, 
  /* [20][0][][] */ 19,65,60,91,-94,92,8,72,15,32,-87,11,32,65,34,-74,-51,-53,-49,-35,14,-45,-74,-70,68,-77,-113,42,16,7,-34,104,98,33,-20,55,33,-29,17,-112,-86,-40,-85,-93,-27,-65,-58,95,56,-108,-74,30,50,98,59,-1,88,44,127,70,74,-49,-78,-50,-20,-72,-51,10,-82,-62,-60,67,-69,-93,32,15,72,66,91,108,60,-9,78,-18,44,94,-26,52,9,86,21,60,0,39,11,17, 
  /* [21][0][][] */ 67,71,74,-106,124,-55,71,9,-15,-49,-68,49,25,36,-51,-82,-92,-26,27,15,98,-44,72,-77,68,-77,-29,78,22,42,-6,-24,13,22,-91,-109,111,79,-103,-23,-19,14,24,-14,-109,-95,-111,85,-18,-48,-55,92,51,87,-85,-14,-46,63,-18,121,26,-70,30,12,81,25,-32,-60,-86,-1,60,88,23,-7,73,68,-101,-23,61,87,17,89,18,-59,24,-85,61,-86,-98,60,107,-127,-33,-54,57,-30, 
  /* [22][0][][] */ 17,-61,-75,-113,91,-58,107,45,-110,80,-77,-122,106,-114,-117,-86,38,86,-30,-75,75,-76,31,28,91,-3,-127,99,-58,-83,-71,-111,60,62,20,6,2,-20,-74,-116,-2,-18,-6,92,50,-121,87,-26,-57,-80,-13,-17,-61,-88,-57,19,-16,-36,-47,-29,97,-76,-73,-120,-61,14,-115,-60,112,93,-38,-8,-68,0,67,-94,51,-52,62,82,103,-96,-92,-122,75,80,97,-34,-70,28,-65,51,18,9,-40,88, 
  /* [23][0][][] */ 26,-78,-2,45,105,-113,-1,-119,50,-115,85,59,-13,-102,8,-41,80,-22,-109,106,92,-85,95,-41,-22,-11,78,10,60,43,52,-42,-46,55,12,48,87,-8,-127,6,-96,4,2,-111,-75,-74,122,18,74,-106,-107,-62,66,-33,-71,71,-79,2,66,39,-97,-94,-39,-13,45,44,-120,-109,46,-30,111,-69,7,-48,-41,-99,62,-27,86,123,-50,-53,14,-103,85,3,111,0,-87,29,102,-19,97,-80,-61,57, 
  /* [24][0][][] */ -66,-34,-67,-49,-50,-61,-46,-67,40,75,52,34,84,40,-25,-77,-52,30,22,-42,57,-54,-37,-23,42,-17,51,44,74,46,3,-59,-5,0,26,15,-32,-59,29,-17,-54,-72,72,2,14,-31,26,46,-60,-31,-49,6,51,35,42,-52,9,37,22,5,47,-2,29,72,-78,67,-32,-72,-61,41,-48,-24,-40,38,67,71,41,-50,-70,-78,-48,-67,-56,-79,3,45,-19,-71,15,-76,6,-127,-12,28,-63,27, 
  /* [25][0][][] */ -64,-57,-78,-8,63,-72,-100,39,38,-113,-45,15,75,-10,-104,-29,-73,43,25,-100,51,70,-19,-59,3,-64,-103,28,62,-99,23,89,79,-107,38,57,81,-71,-30,-33,-86,73,-101,-4,84,31,70,26,-101,78,-47,-11,32,-14,-62,32,-25,35,-92,57,93,34,29,27,-14,60,-22,-19,-86,-10,-29,-119,27,-109,60,13,53,58,6,22,33,39,-50,60,-77,-55,-107,-86,-29,-36,88,24,-127,-20,-21,-76, 
  /* [26][0][][] */ 30,-113,-30,-23,-82,15,-17,-24,-113,-127,100,94,-64,-50,1,-20,110,28,-75,-58,15,64,93,9,36,67,8,40,10,13,-106,-7,-37,-63,-104,-94,-69,69,-65,108,-104,94,47,27,-82,70,-42,94,-29,33,-27,97,8,-20,-20,-110,107,92,9,24,5,-100,81,-27,116,-16,-63,61,-96,64,90,90,74,-115,-87,2,55,-113,-101,5,-26,64,75,-77,73,0,-47,39,-82,102,16,24,-61,117,31,68, 
  /* [27][0][][] */ 40,23,-35,-40,-103,-56,-29,7,68,89,53,-69,-32,62,91,2,66,7,57,-60,-53,30,-5,6,-59,57,-57,7,66,0,-3,4,54,66,-31,-49,-55,-19,-90,80,-39,27,44,37,108,47,87,104,82,49,96,-39,-70,-74,-1,25,91,-20,-102,-46,-12,-20,-18,38,32,-9,-63,92,52,25,-78,11,72,-27,2,-51,52,-34,88,102,83,7,127,-31,-31,-45,-6,42,-17,22,-16,-23,52,57,77,64, 
  /* [28][0][][] */ 70,19,58,51,-110,-9,-38,-6,6,-12,38,47,17,-38,36,59,61,61,0,66,5,30,-48,-18,-68,32,-31,-17,-27,-48,24,-2,-31,6,53,54,19,-43,18,9,73,27,-42,49,-28,9,15,49,32,0,9,3,-18,-7,68,82,57,-17,55,27,28,6,-79,10,4,47,8,37,-44,17,-47,-21,43,22,5,-38,-80,-25,-36,51,-38,-51,127,-13,51,-52,39,-49,-30,4,-22,-33,-22,40,-10,-30, 
  /* [29][0][][] */ 63,44,40,-43,-127,10,-101,6,87,-19,-78,-78,84,-96,-38,-45,-87,80,25,-44,-63,-32,39,2,-38,1,-36,-30,-87,-7,90,-5,35,-8,-68,-44,-15,94,-16,68,47,79,-35,69,10,98,-24,-21,11,-8,99,-71,49,-102,94,65,-84,20,-62,79,-81,80,-103,-60,-72,-52,40,62,75,-66,20,-78,92,73,42,15,89,-58,-29,40,-8,-71,14,-67,53,92,28,65,-31,93,50,68,-110,22,19,60, 
  /* [30][0][][] */ 1,-63,-59,19,-99,2,-78,-11,95,-15,0,-67,-100,0,60,-1,-2,26,68,-118,24,-98,-109,15,-110,5,-85,117,-27,-108,-100,-12,-97,-68,-127,-51,17,-16,-3,14,89,-74,-9,100,105,-43,101,62,-69,70,15,-123,73,-73,-8,102,-99,-55,-78,-74,-114,-1,-72,-45,-123,-106,-92,82,-75,112,46,-48,-92,103,42,-82,-61,-68,-75,-57,10,17,-117,-33,-106,30,-118,91,-57,-117,80,40,-47,-19,-9,-68, 
  /* [31][0][][] */ 84,-76,24,79,25,44,-45,-77,-18,-22,-64,-68,115,-93,-36,77,-48,-65,27,36,53,26,-26,77,25,-90,29,29,-55,-56,35,73,16,14,-66,-15,67,-27,-59,-85,43,-57,-21,19,4,-46,-31,17,50,17,81,-27,-90,-40,-62,28,-89,127,-1,81,-5,-3,61,-53,52,78,-34,-57,53,-84,-93,5,-78,-34,0,1,-46,-39,35,72,-59,-33,45,45,39,68,-76,7,17,-36,-67,-51,6,90,24,8, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018835884984582663, 0.0018869020277634263, 0.0019483215874060988, 0.0019601986277848482, 0.0019302744185552001, 0.0020905088167637587, 0.002216575900092721, 0.0022148552816361189, 0.0021868001203984022, 0.0019833343103528023, 0.0017853979952633381, 0.0038048557471483946, 0.001795663614757359, 0.0019810374360531569, 0.002138833049684763, 0.0020416276529431343, 0.0018517436692491174, 0.0023883301764726639, 0.0025163295213133097, 0.002165317302569747, 0.0020088325254619122, 0.0019340207800269127, 0.0018360459944233298, 0.0018927906639873981, 0.0027011921629309654, 0.0020250433590263128, 0.0018364412244409323, 0.0023902417160570621, 0.0033814141061156988, 0.0021890075877308846, 0.0018396412488073111, 0.002460242947563529, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1980, 4542, 9880, 2989, -3845, -3226, 23193, 1994, 3141, -1607, 10468, -210, -8366, 3063, 15751, 6966, 14640, 5647, -4362, -5149, 4690, 37803, 20848, 18951, 1280, 1238, 5501, 3580, 2224, -5616, 6798, -2997, -303, 3712, 69, 1153, 9369, 6480, -2022, 5420, 9534, 5081, 5557, 12654, 4470, 3893, 2121, 8461, 6198, -5139, -4040, 784, -295, -1160, 3125, 197, 259, -702, -4390, 12943, -1066, 1184, -1284, -2121, -3579, 7032, 25198, 1869, -2627, 905, 1408, 1990, 1781, -1355, 596, 11103, -656, 14788, 16204, -804, 8584, 2533, -335, 1399, 15242, 8951, 4369, 1454, 7506, 4399, -705, -6978, 1110, -2186, -1519, -2489, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00030709730344824493, 0.00035029070568270981, 0.00024198430764954537, 0.00029968642047606409, 0.00025112458388321102, 0.00045751361176371574, 0.00014385547547135502, 0.00037792010698467493, 0.00019483458891045302, 0.00037424772744998336, 0.00019140748190693557, 0.00028364267200231552, 0.00029800229822285473, 0.00092612550361081958, 0.00019615713972598314, 0.00016999823856167495, 0.00013055498129688203, 0.00025599982473067939, 0.00045283162035048008, 0.00032143300632014871, 0.00013060997298453003, 7.2822236688807607e-05, 0.000146708101965487, 8.7881708168424666e-05, 0.00013733707601204515, 0.00040389460627920926, 0.00054109579650685191, 0.00030470083584077656, 0.000227800352149643, 0.00034677778603509068, 0.00021608173847198486, 0.00025675474898889661, 0.00019219666137360036, 0.00030897420947439969, 0.00029319699387997389, 0.00021581827604677528, 0.00020250678062438965, 0.0001666820899117738, 0.00027867054450325668, 0.00032602291321381927, 0.00013613046030513942, 0.00050637341337278485, 0.00027243149816058576, 0.00018333172192797065, 0.00043774567893706262, 0.00026625805185176432, 0.00025940671912394464, 0.00025314741651527584, 0.00021913489035796374, 0.00026044488186016679, 0.00035646706237457693, 0.00015368295134976506, 0.00057544239098206162, 0.00029255310073494911, 0.00024781873798929155, 0.00039898301474750042, 0.00042594163096509874, 0.00037136775790713727, 0.00034717630478553474, 0.00014148021000437438, 0.0007167697767727077, 0.00054003426339477301, 0.00019778350542765111, 0.00034781690919771791, 0.0005202804459258914, 0.00027477802359499037, 8.5919833509251475e-05, 0.00021534533880185336, 0.00044453266309574246, 0.00038859149208292365, 0.00028424759511835873, 0.00025867612566798925, 0.00076617137528955936, 0.00031634906190447509, 0.00025832658866420388, 0.00019377365242689848, 0.00025296912644989789, 0.00012629672710318118, 0.00011304472718620673, 0.00020113641221541911, 0.00017307883535977453, 0.00013068565749563277, 0.00015601140330545604, 0.00017804490926209837, 0.00011631237430265173, 0.00026370491832494736, 0.00053377920994535089, 0.00020215644326526672, 9.7209667728748173e-05, 0.00047099386574700475, 0.00019192737818229944, 0.00028105024830438197, 0.00019168837752658874, 0.0004633789649233222, 0.00037939395406283438, 0.00015957411960698664, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -26,93,12,-127,-62,-36,-39,-59,-6,-7,-7,76,30,-63,-17,63, 
  /* [1][0][][] */ -30,34,-59,4,-29,-19,23,-90,77,65,-63,39,-6,8,31,-127, 
  /* [2][0][][] */ -35,27,-24,60,29,34,-57,-38,127,-74,-45,-31,-43,121,-62,19, 
  /* [3][0][][] */ 39,-64,18,-127,24,-47,-24,-14,120,-20,102,67,37,50,40,107, 
  /* [4][0][][] */ -96,57,12,50,-38,-47,19,60,-3,-14,-32,-72,-127,-3,7,38, 
  /* [5][0][][] */ -12,47,106,31,35,71,-89,66,-36,76,-14,-60,38,-20,-127,-5, 
  /* [6][0][][] */ 45,-27,127,-122,50,28,-42,105,-59,-104,70,-25,-14,96,-18,102, 
  /* [7][0][][] */ 15,114,3,-55,77,-21,-6,-33,127,52,-49,14,65,-11,56,49, 
  /* [8][0][][] */ 3,-83,10,-80,25,-33,25,-72,31,58,82,-8,1,127,81,67, 
  /* [9][0][][] */ 7,-35,-5,127,20,-16,49,-74,-54,103,24,-36,-12,-63,-6,0, 
  /* [10][0][][] */ -15,12,-35,-127,12,-14,-5,46,29,-61,20,-65,-18,-47,-4,4, 
  /* [11][0][][] */ -10,21,33,-5,85,-16,69,-49,-75,41,2,1,-13,127,-77,-24, 
  /* [12][0][][] */ 65,-51,-82,7,14,-76,-9,33,53,89,-40,-23,-32,127,-10,23, 
  /* [13][0][][] */ -20,12,-16,14,5,-127,4,26,10,-12,9,-8,2,-14,12,13, 
  /* [14][0][][] */ 43,-63,94,-52,71,-3,-127,-104,-28,-48,30,47,25,-86,-9,-48, 
  /* [15][0][][] */ -70,13,-28,-37,18,11,121,50,-18,50,127,-2,6,87,58,-7, 
  /* [16][0][][] */ 14,77,127,114,4,35,118,81,-82,-2,-50,-1,-1,15,32,-102, 
  /* [17][0][][] */ -56,-100,-7,40,-79,-14,-50,25,-127,-25,-2,-69,-19,46,52,-42, 
  /* [18][0][][] */ -1,44,-9,52,59,21,10,-24,101,43,-14,0,36,127,77,1, 
  /* [19][0][][] */ -12,-30,59,60,124,20,-121,-7,-68,-63,-40,-127,-50,9,-57,-62, 
  /* [20][0][][] */ 43,-20,-39,-6,-37,-96,12,52,-24,16,-127,-40,-17,30,28,4, 
  /* [21][0][][] */ 108,-51,79,-22,41,14,-9,90,-23,-103,127,45,43,112,35,96, 
  /* [22][0][][] */ -69,62,-25,127,-82,20,101,81,-20,10,-31,-32,-48,9,44,30, 
  /* [23][0][][] */ 55,19,127,-107,48,-21,-12,44,3,-5,8,-47,8,-30,-106,43, 
  /* [24][0][][] */ -127,66,13,-14,15,118,22,-33,-14,30,119,-10,-77,18,51,-16, 
  /* [25][0][][] */ 18,20,16,40,11,14,72,-47,2,-127,-10,-34,-24,-25,4,13, 
  /* [26][0][][] */ -41,-1,-9,-2,-56,-19,-42,-38,-127,-49,6,-51,32,127,-27,63, 
  /* [27][0][][] */ -13,42,11,76,31,-21,-16,-28,61,10,-29,-4,-6,127,-10,19, 
  /* [28][0][][] */ 17,82,63,57,127,-15,17,36,-84,-28,-54,-13,20,89,56,-34, 
  /* [29][0][][] */ -13,-4,37,30,58,6,-31,59,-6,1,-10,-127,25,-3,-43,-27, 
  /* [30][0][][] */ -16,65,-57,66,-36,-24,42,-127,-49,54,-19,-5,68,30,74,75, 
  /* [31][0][][] */ -15,-16,-8,-77,-10,-8,-79,-112,14,93,-36,-127,-3,-59,-4,22, 
  /* [32][0][][] */ -127,-61,-3,59,53,48,-5,11,0,-43,-108,60,65,4,61,75, 
  /* [33][0][][] */ -28,-20,-41,0,-100,10,-59,12,60,17,-1,-54,-5,-105,127,33, 
  /* [34][0][][] */ 47,-7,66,30,45,28,-52,90,-79,-47,77,26,6,2,-19,127, 
  /* [35][0][][] */ -40,56,-73,29,-5,-12,17,-103,109,89,-96,-9,-11,-6,78,-127, 
  /* [36][0][][] */ -46,62,24,127,11,30,84,50,7,36,-42,-32,-50,55,-59,-20, 
  /* [37][0][][] */ -8,48,16,-46,19,31,-60,-86,-81,-6,20,-22,-16,-127,48,-26, 
  /* [38][0][][] */ 51,92,-40,-47,127,11,14,-27,115,99,-36,-4,-17,-19,58,23, 
  /* [39][0][][] */ -41,57,-5,-127,-29,0,-30,37,38,-86,-36,-47,-2,70,50,25, 
  /* [40][0][][] */ 24,12,42,-80,13,1,-41,-58,-127,3,5,-20,19,-94,49,-30, 
  /* [41][0][][] */ -16,-8,-28,5,-6,-25,4,-1,-15,11,-50,-22,-127,24,20,34, 
  /* [42][0][][] */ 127,64,-32,-39,-78,-79,-6,-49,-20,12,102,-78,-44,58,115,-126, 
  /* [43][0][][] */ -10,70,-65,-11,63,-47,120,-41,28,59,-49,-20,61,-127,-69,-58, 
  /* [44][0][][] */ -18,-28,14,-44,71,-22,-93,-127,-29,-18,47,35,14,-3,76,-75, 
  /* [45][0][][] */ -3,14,-127,-52,13,-97,44,-48,-18,33,-10,-39,77,-25,48,-38, 
  /* [46][0][][] */ 2,-8,-12,-75,-28,6,27,-12,-122,-33,-2,14,-5,-127,66,-42, 
  /* [47][0][][] */ 21,37,28,-21,127,-9,-25,21,-54,37,-5,31,3,-5,120,-33, 
  /* [48][0][][] */ -126,-87,-28,42,95,40,4,-38,-12,-4,-127,75,87,7,91,72, 
  /* [49][0][][] */ 30,17,74,58,119,-12,53,12,-127,-78,-21,-73,4,87,29,-26, 
  /* [50][0][][] */ 10,-8,-112,12,7,-127,-38,-13,0,-26,10,-25,27,-10,-8,-3, 
  /* [51][0][][] */ -8,26,50,27,58,23,-6,28,-95,83,25,-127,-10,-90,-32,85, 
  /* [52][0][][] */ 6,71,-16,58,70,11,30,9,44,117,-24,-93,25,127,39,33, 
  /* [53][0][][] */ -19,-22,-13,-13,-115,-3,-58,13,53,9,-7,-38,5,-115,127,19, 
  /* [54][0][][] */ 63,-34,-56,-1,121,71,-127,-78,-109,-24,-69,-64,29,-87,-12,-50, 
  /* [55][0][][] */ 50,15,-14,-6,38,-50,-68,-127,-49,-58,-71,24,6,-24,-4,13, 
  /* [56][0][][] */ -12,12,27,-22,-2,-17,-97,74,-3,127,7,-3,21,4,1,15, 
  /* [57][0][][] */ -16,11,-45,-24,-48,-34,127,83,-30,20,-28,-22,12,13,114,-29, 
  /* [58][0][][] */ 70,20,-127,27,74,84,-64,61,-78,-15,-13,4,-31,31,13,-5, 
  /* [59][0][][] */ -104,91,118,26,-83,-56,126,127,21,17,25,-16,10,18,72,9, 
  /* [60][0][][] */ 4,-17,-47,7,20,-127,-8,19,-5,-29,-19,-41,15,-15,0,12, 
  /* [61][0][][] */ 21,-10,33,127,78,15,19,1,-105,-10,14,38,-6,16,31,-44, 
  /* [62][0][][] */ -76,127,38,-29,-53,-18,-71,69,-3,-74,-65,-47,-9,-70,-40,-50, 
  /* [63][0][][] */ -59,33,-12,127,-75,10,-56,-20,-53,-26,-32,-64,15,68,32,40, 
  /* [64][0][][] */ -10,17,0,43,-10,9,-26,78,24,3,-30,-45,-18,-127,59,-12, 
  /* [65][0][][] */ -16,-34,3,-127,27,-47,58,-23,-13,30,5,-90,9,-5,30,-42, 
  /* [66][0][][] */ 62,-2,55,-38,17,-10,-17,75,-12,-40,72,77,45,127,15,103, 
  /* [67][0][][] */ 9,34,-21,-127,-2,0,-50,30,70,-90,-25,-19,34,69,81,35, 
  /* [68][0][][] */ -5,28,127,2,17,-1,-19,-6,-39,-34,-20,-28,23,-29,83,-23, 
  /* [69][0][][] */ 127,70,-8,-9,-69,-33,-33,-32,4,5,101,-58,-38,47,68,-90, 
  /* [70][0][][] */ 28,16,-59,-10,-33,28,58,127,-36,77,-37,-13,-3,56,-17,20, 
  /* [71][0][][] */ 7,7,-4,12,5,-57,-1,22,-24,30,-75,13,-127,5,40,50, 
  /* [72][0][][] */ 14,34,-127,17,4,22,29,79,-53,-14,4,-4,14,12,-4,18, 
  /* [73][0][][] */ -65,32,54,17,60,-22,-88,-127,21,-80,36,-43,14,-42,25,-15, 
  /* [74][0][][] */ -4,34,47,127,5,-2,-77,89,-53,14,-58,57,6,-105,34,-93, 
  /* [75][0][][] */ -28,52,-36,31,-4,9,18,-12,127,26,-25,-1,-16,120,-38,19, 
  /* [76][0][][] */ 6,-16,-8,7,7,-12,-5,53,9,-28,-22,-127,0,-16,12,16, 
  /* [77][0][][] */ -41,39,0,127,-62,45,70,103,16,25,-21,1,-67,-5,0,21, 
  /* [78][0][][] */ -16,31,31,-89,42,-4,-32,46,31,-48,2,-53,-17,127,19,44, 
  /* [79][0][][] */ -11,-79,-89,-58,-91,6,38,-91,127,21,31,75,9,31,43,-39, 
  /* [80][0][][] */ -66,-21,113,-60,10,-17,35,-60,-51,17,-59,-127,-1,96,90,-67, 
  /* [81][0][][] */ -57,67,-127,37,67,-126,-28,65,4,-50,67,2,22,7,9,-3, 
  /* [82][0][][] */ 127,5,-17,11,14,-117,-12,9,-38,-23,-101,-20,119,-9,-1,33, 
  /* [83][0][][] */ -32,55,-118,-90,-42,-16,53,-101,84,51,-70,-127,30,46,48,100, 
  /* [84][0][][] */ -30,27,38,-46,-8,-7,64,-127,-45,79,-27,-20,22,29,73,-1, 
  /* [85][0][][] */ -91,127,31,-114,-84,-19,-28,3,-46,-7,-75,25,-14,-5,-86,-22, 
  /* [86][0][][] */ -13,-7,-26,3,-46,-28,127,41,-1,-36,-15,-8,8,27,86,-26, 
  /* [87][0][][] */ -19,-46,-8,-127,-6,-50,45,-4,-5,-12,-18,-121,-11,5,26,-44, 
  /* [88][0][][] */ 127,-5,61,10,48,-118,-2,28,-53,49,-98,-67,57,46,80,14, 
  /* [89][0][][] */ 32,-6,-46,-42,26,-15,-31,-32,-56,15,44,-47,127,7,30,-31, 
  /* [90][0][][] */ -7,-32,35,-77,49,-7,-73,88,38,-86,-62,-37,-10,127,20,-123, 
  /* [91][0][][] */ -38,-12,-6,-32,20,-22,-34,-79,13,58,-19,-127,-22,5,-24,4, 
  /* [92][0][][] */ -25,16,37,9,4,-127,17,3,-11,-34,-1,-33,-3,-28,22,7, 
  /* [93][0][][] */ 45,-20,127,-20,-50,62,37,-37,-27,48,-70,-2,-8,-4,26,18, 
  /* [94][0][][] */ 26,-4,-17,-23,14,-15,-12,-4,-23,-15,7,-36,127,-20,33,-32, 
  /* [95][0][][] */ 127,105,-16,27,-101,-33,-82,-9,-22,-19,115,-49,-36,21,77,-90, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00093087524874135852, 0.0010618034284561872, 0.00073350436287000775, 0.0009084113989956677, 0.00076121039455756545, 0.0013868181267753243, 0.00043605561950244009, 0.0011455537751317024, 0.00059058383340016007, 0.0011344220256432891, 0.00058019557036459446, 0.00085977948037907481, 0.00090330641251057386, 0.002807277487590909, 0.00059459276963025331, 0.00051529973279684782, 0.00039573907270096242, 0.00077598827192559838, 0.0013726260513067245, 0.0009743297123350203, 0.00039590577944181859, 0.00022073922445997596, 0.00044470251305028796, 0.00026638759300112724, 0.00041629702900536358, 0.0012242879020050168, 0.0016401730244979262, 0.00092361110728234053, 0.00069050985621288419, 0.0010511550353839993, 0.00065498834010213614, 0.00077827664790675044, 0.00058258773060515523, 0.00093656452372670174, 0.00088874052744358778, 0.00065418973099440336, 0.00061383983120322227, 0.00050524779362604022, 0.00084470794536173344, 0.00098824268206954002, 0.0004126395215280354, 0.00153492228128016, 0.00082579610170796514, 0.00055571628035977483, 0.0013268974144011736, 0.00080708309542387724, 0.00078631530050188303, 0.00076734204776585102, 0.00066424306714907289, 0.0007894621230661869, 0.0010805252240970731, 0.00046584472875110805, 0.0017442845273762941, 0.0008867887663654983, 0.00075118971290066838, 0.0012093997793272138, 0.0012911169324070215, 0.0011256922734901309, 0.0010523629607632756, 0.00042885571019724011, 0.0021726770792156458, 0.0016369551885873079, 0.00059952260926365852, 0.0010543047683313489, 0.0015770773170515895, 0.0008329088450409472, 0.00026044074911624193, 0.00065275613451376557, 0.0013474702136591077, 0.0011779009364545345, 0.00086161307990550995, 0.00078410067362710834, 0.002322423504665494, 0.00095891923410817981, 0.0007830411777831614, 0.00058736791834235191, 0.00076680164784193039, 0.00038283143658190966, 0.00034266189322806895, 0.0006096859578974545, 0.00052463763859122992, 0.00039613520493730903, 0.00047290275688283145, 0.00053969083819538355, 0.00035256679984740913, 0.00079934397945180535, 0.0016179949743673205, 0.00061277789063751698, 0.00029466254636645317, 0.001427679555490613, 0.00058177148457616568, 0.00085192127153277397, 0.00058104703202843666, 0.0014045971911400557, 0.0011500213295221329, 0.00048370208241976798, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -8185, 17748, -13464, 3549, -1828, 9974, 12502, -60751, -1061, 20323, 21135, 26614, -8661, 14495, -9942, 6744, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00075837632175534964, 0.00038497234345413744, 0.00020534232317004353, 0.00022440469183493406, 0.0004975275369361043, 0.00043608524720184505, 0.0003692861064337194, 0.00029159447876736522, 0.00037302717100828886, 0.00027470925124362111, 0.00081175146624445915, 0.00065804884070530534, 0.00034609806607477367, 0.0002446994767524302, 0.0005501233390532434, 0.00046135421143844724, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -30,-14,36,-25,39,-4,-24,17,17,12,8,22,12,-3,-31,6,9,6,8,8,14,-42,14,12,-8,19,24,127,19,-29,57,-19,-6,2,-1,-24,-13,28,-67,-9,-4,3,3,21,12,44,8,-1,33,1,-5,24,13,-37,-25,68,-24,3,-33,-32,-2,36,15,-14,-42,-68,-9,38,19,27,28,-11,-5,-28,-3,-36,-3,25,-19,-1,-7,-7,33,22,7,-24,-4,-97,11,4,14,-19,49,-18,-14,-26, 
  /* [1][0][][] */ 71,-84,-116,-76,109,-21,57,34,-22,-84,-77,-20,-13,-18,-61,57,-70,11,20,75,9,55,-6,-71,7,1,-37,-86,61,-33,-71,32,-25,27,5,25,18,-8,-5,65,-45,38,-52,-3,-52,61,3,-10,24,-103,4,-85,-20,52,68,46,-42,-5,-15,-33,17,-27,-2,-57,-87,115,-38,-25,-23,-56,-65,28,72,-111,-36,32,7,-55,48,11,-1,-32,43,3,-75,47,3,39,-7,-44,-3,34,23,10,-1,127, 
  /* [2][0][][] */ -39,31,-102,-8,127,107,28,101,19,-91,-19,-19,-32,17,15,52,38,-22,-30,107,11,-13,113,23,82,36,-5,-102,28,2,56,-51,45,40,-17,48,-110,-75,-25,87,29,-39,41,-14,17,-10,0,72,-12,34,-32,-38,86,-23,2,41,22,22,5,20,46,65,43,-22,9,8,-37,-12,-38,-29,-32,-10,-30,-66,-28,72,117,54,4,4,50,-20,31,-3,-26,-3,34,73,-9,41,25,-39,7,-6,-62,-3, 
  /* [3][0][][] */ 99,-10,30,-21,12,-23,-2,-56,-21,-74,-52,-66,-38,48,52,89,13,4,-14,-7,127,-2,52,4,102,-12,-40,23,62,22,-28,109,-100,31,22,54,1,-53,19,73,-99,-32,86,70,17,-36,-33,-80,-69,-50,-58,-18,4,-123,31,45,-66,82,53,49,18,90,-37,-73,10,58,-39,-64,-2,-105,-41,-71,55,-52,57,15,-23,-19,103,76,-17,-109,13,3,-48,28,29,52,-1,-19,28,66,14,65,32,-8, 
  /* [4][0][][] */ 6,-12,52,2,127,41,3,2,-12,-43,-23,-7,-26,21,1,45,37,-44,-32,96,-13,2,36,-12,17,12,38,-58,-1,-4,58,-33,51,12,-38,-13,33,26,-19,24,-22,-9,-15,-33,-11,-16,-26,14,17,8,-22,-12,-22,-55,-15,-45,-8,-12,-38,20,0,48,67,25,22,26,14,-18,-28,-4,37,59,15,-55,-26,-29,78,55,46,-45,3,0,4,-11,-39,-3,48,31,-21,41,-3,-66,23,22,43,-22, 
  /* [5][0][][] */ -8,-21,10,27,29,5,40,-12,-7,-31,-18,17,-10,40,8,-1,5,8,3,5,23,11,-37,70,21,7,20,-94,-3,30,26,28,-8,6,1,-31,25,31,-12,29,-12,-3,28,-16,-2,2,-10,-21,-9,-26,-1,-33,-10,-37,2,-51,-2,6,-27,24,63,20,1,15,-22,52,11,63,10,44,4,24,-2,5,-6,59,-14,-1,13,7,10,2,-3,23,1,-5,8,127,6,26,12,-26,17,31,-40,13, 
  /* [6][0][][] */ 34,-56,-20,-29,-30,15,43,-1,-10,16,-29,-57,-40,3,-43,41,4,-17,-13,-2,-31,36,5,-2,-37,-9,-12,14,10,11,42,0,63,11,58,-2,-6,-10,35,-90,-2,95,-2,-19,17,-37,-22,10,-13,13,-20,99,-12,-31,-6,19,-3,-57,11,11,-27,61,25,-52,34,-37,6,-6,0,32,127,-3,-38,0,-21,8,-110,-13,30,15,14,40,19,-5,-28,5,34,23,-5,13,52,-13,-10,-19,-45,-14, 
  /* [7][0][][] */ 29,127,-15,-1,88,40,28,-61,-28,-30,-1,-35,-44,25,32,40,6,-38,-9,10,37,-29,41,-8,-5,-2,-35,18,49,-28,-25,33,55,-6,-28,37,42,-13,17,96,-60,45,23,53,-21,-76,49,-20,-37,-26,42,10,49,0,-14,83,80,31,-11,-3,-24,-63,-31,-16,-55,68,-61,-85,-31,-55,-16,61,-12,-36,1,28,6,51,63,7,-54,-61,-11,-6,-23,86,-14,-2,-59,3,-48,7,-68,-57,-21,28, 
  /* [8][0][][] */ 6,-7,31,11,-127,-22,38,-29,24,67,54,-6,-15,9,14,-11,-46,-8,28,3,-12,5,-95,60,45,-41,37,-19,10,-9,-5,43,70,-25,7,15,-26,-14,1,41,11,-7,32,14,-32,-30,37,6,-94,15,-1,21,-54,-24,-12,46,12,-35,-83,-27,16,-32,-35,-15,14,77,-21,-40,24,-27,-47,-2,49,52,54,10,-39,-35,17,34,-73,2,-20,-20,12,50,36,46,12,-52,44,38,20,6,33,16, 
  /* [9][0][][] */ 15,-116,9,24,75,78,-34,-6,23,-30,55,76,-7,32,102,-122,40,-28,-6,35,-44,-23,47,3,8,10,7,9,-29,0,35,-8,22,15,-105,49,19,11,-44,82,18,-55,0,74,1,-42,-73,-30,22,17,-22,-127,61,10,5,-55,-5,85,-19,22,26,-50,-22,85,-102,-13,-1,-26,-9,-21,-81,-64,32,-2,10,58,56,-37,17,9,9,-16,1,21,9,-45,59,1,8,-31,-28,19,-50,1,6,-42, 
  /* [10][0][][] */ -58,-17,19,-18,1,-7,80,-5,25,23,31,49,32,-2,-17,7,-5,19,-8,4,-11,24,18,31,-23,-1,35,-127,11,-32,63,-47,-2,15,-10,-26,-16,41,-16,-9,13,-37,27,-69,9,32,14,19,-9,23,-21,-5,-43,-36,-25,-46,-7,-6,0,-41,17,21,21,22,-38,85,-3,-34,32,-4,6,-18,-28,2,25,32,30,45,-43,9,-11,20,15,24,12,-24,-1,108,-2,14,26,-13,38,-15,59,-41, 
  /* [11][0][][] */ -109,17,31,18,23,-77,0,5,-51,-32,-12,8,27,46,-34,-23,50,-3,-45,-51,13,-16,2,-3,118,13,104,-18,-45,8,-34,4,-14,31,-17,0,-21,4,-18,19,0,6,1,12,86,26,82,45,31,42,-33,15,4,-85,10,0,-99,-28,-49,-50,-8,8,-5,-3,-17,-18,11,7,46,-6,8,32,-34,-4,54,40,-1,105,-106,75,-31,-17,-87,-85,127,41,29,-21,8,55,3,-93,-23,49,16,-23, 
  /* [12][0][][] */ -26,6,14,0,89,21,19,19,3,11,78,6,37,-9,32,-19,-21,3,27,-5,7,-20,-34,58,-17,45,12,83,-43,38,-15,-6,-26,32,-11,-14,-33,2,-12,-10,11,-17,2,-32,-6,41,12,15,-1,0,-11,-13,-41,-15,-38,-53,-30,-26,-1,26,-5,-8,14,59,38,-68,30,51,-9,-127,11,54,2,8,17,61,41,4,-29,-9,3,43,-42,-13,29,-34,12,-50,22,40,8,-49,-15,60,22,13, 
  /* [13][0][][] */ -42,46,-42,-14,-73,-10,-33,-5,-42,-15,8,13,62,23,-23,-11,-32,22,-83,-19,5,-18,58,-78,53,36,-37,13,17,-50,-54,-96,-94,-37,0,27,11,19,21,-21,-49,84,21,34,58,-47,1,-7,54,-21,37,29,47,-43,78,-2,-2,68,29,22,5,14,-41,15,-8,-21,-20,-16,3,-36,-9,-127,40,-33,-106,17,25,4,-24,-20,86,-44,16,-36,20,-34,117,26,-57,-14,0,53,33,-64,-34,41, 
  /* [14][0][][] */ -16,47,-32,-49,30,-18,5,18,-82,-15,34,-3,-18,-73,-80,-33,-91,-28,73,-20,43,-13,-4,-108,-46,8,-55,7,17,-34,-24,-19,-71,-29,28,5,-23,-11,-2,-28,27,100,-86,-19,-54,12,18,3,115,-13,29,19,23,57,-127,25,-39,27,-107,-1,4,24,41,43,15,22,-4,11,-44,58,69,23,22,-21,-34,18,45,-86,-28,-91,-8,-46,11,38,32,-77,-69,11,-52,34,17,69,22,13,13,-19, 
  /* [15][0][][] */ -28,-83,-28,-38,1,7,-6,-79,-24,27,-17,-15,43,-13,51,-3,-91,6,-24,21,-31,-2,-70,-35,-31,8,-11,12,-12,-11,66,-93,0,29,31,11,1,32,-87,8,47,-72,-2,53,-39,-43,51,12,39,15,3,-127,2,61,0,50,47,-5,-11,56,8,0,37,10,14,-10,1,-19,-24,14,6,26,-27,14,-10,-50,-39,-19,-4,18,-10,55,-2,77,-8,-42,-15,-31,-44,53,33,95,-31,-7,-10,7, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.032230991870164871, 0.016361324116587639, 0.0087270485237240791, 0.0095371995121240616, 0.021144919097423553, 0.018533622846007347, 0.015694659203290939, 0.012392764911055565, 0.015853654593229294, 0.011675142683088779, 0.034499436616897583, 0.027967074885964394, 0.014709168113768101, 0.010399727150797844, 0.02338024228811264, 0.019607553258538246, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 19154, 60776, -1431, -915, 17568, -5109, -1348, -1422, 7794, 19775, -2670, 480, 1162, 2898, 5060, -9716, -4749, -867, -1124, 14012, -12289, 14725, 143, 9151, 35907, 126, -581, 16518, 14862, -20032, 3083, 25757, 24467, -11706, 4198, 1410, -578, -268, 4197, -8385, -6542, -1624, -7079, -416, 29269, -3520, 12313, -598, -14421, 2115, -67, 1196, -3358, 15235, -4979, 15231, 19088, -234, 38375, 288, -9215, -429, 2700, -537, 251, 14277, -1254, -6948, -3713, 2445, -111, -4872, 1047, -94, -4755, -7241, 214, -1405, 36252, -7640, -5480, -12599, 738, 837, 62188, -16253, -12121, -27047, -9507, 5942, -2463, 31618, -26, -3333, -3198, 537, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00013117287016939372, 9.4810697191860527e-05, 0.00012041541776852682, 0.0001967661373782903, 0.00021096222917549312, 0.00015838554827496409, 5.3467552788788453e-05, 0.00010390271199867129, 0.0002449056482873857, 0.00012430906645022333, 0.00027407167362980545, 0.00011644416372291744, 0.00028162874514237046, 0.0002148265193682164, 0.0003538469027262181, 0.00014729311806149781, 0.0001966838026419282, 0.00015221006469801068, 0.00018261908553540707, 7.6728909334633499e-05, 6.8142697273287922e-05, 5.2063831390114501e-05, 0.00013784978364128619, 7.8050055890344083e-05, 8.1278376455884427e-05, 0.00010569843288976699, 0.00015670376888010651, 0.00018595074652694166, 8.3111131971236318e-05, 0.00041909929132089019, 0.00035613941145129502, 0.00024621770717203617, 0.00011649420048343018, 0.00013522588415071368, 0.00021342061518225819, 0.00049583695363253355, 0.00041510022128932178, 0.00024418628890998662, 0.00031316198874264956, 8.1927442806772888e-05, 0.00020617371774278581, 0.00018493071547709405, 0.00037735770456492901, 0.00011039914534194395, 0.00033411185722798109, 9.2447335191536695e-05, 9.8464508482720703e-05, 0.00024964401382021606, 0.00076972640817984939, 0.00011092727800132707, 0.00037387746851891279, 0.00015149066166486591, 0.00015666040417272598, 0.0001881414937088266, 0.00017686434148345143, 0.0001087094860849902, 0.00014555004599969834, 0.00048477042582817376, 4.6257620851974934e-05, 0.00018498426652513444, 0.00027161050820723176, 0.00032866132096387446, 0.00012547685764729977, 0.00013105881225783378, 0.00013355746341403574, 0.0001191596602438949, 0.00024437581305392087, 0.00031165831023827195, 0.00020973486243747175, 0.00014519659453071654, 0.00020385016978252679, 9.149864490609616e-05, 0.00025563521194271743, 0.0001362579787382856, 0.0001556417701067403, 0.00026697228895500302, 0.00010746302723418921, 7.6350428571458906e-05, 7.1152753662317991e-05, 0.00017090255278162658, 0.00022340459690894932, 0.00020125087758060545, 0.0001758377329679206, 0.00023349153343588114, 5.7413286413066089e-05, 9.1691988927777857e-05, 7.7875491115264595e-05, 0.00049062015023082495, 0.00020565165323205292, 0.00011361623182892799, 0.00034875134588219225, 4.2621286411304027e-05, 0.00014368112897500396, 9.3873830337543041e-05, 0.00034832456731237471, 0.00027689317357726395, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-9,127,21,69,71,-58,-17,-16,-15,-7,-27,4,37,3,-7,-46,26,24,20,-127,127,5,-91,6,50,-29,-126,-127,37,19,13,29,58,-20,-28,-8,33,0,-13,26,-107,81,23,-72,34,44,-18,48,-24,19,2,-8,20,48,-88,-49,-59,-19,-12,-2,9,40,66,-25,72,13,-9,12,21,127,25,24,31,0,-10,16,127,-5,-16,23,-32,18,126,26,-77,-17,0,-34,-14,-53,-2,-26,-13,27, 127,-127,75,106,-43,127,41,-118,64,5,-16,127,127,-95,-13,17,13,127,127,-106,127,-79,78,74,-127,-123,-75,-34,-55,47,-60,-22,-86,52,-127,-88,-41,-13,-54,63,-1,127,127,83,-50,-115,-111,-50,-15,-127,46,83,68,-33,55,86,-48,44,-81,-115,-46,-41,-62,67,71,-59,28,31,-81,31,-18,88,115,127,19,20,2,59,-33,54,66,127,127,-25,-9,81,-110,127,-120,-99,5,-127,-95,-127,-35,105, -76,-15,28,-82,14,-23,61,-10,74,-33,-28,26,-17,-1,-8,-11,-6,-16,8,-1,-25,-103,29,6,-119,97,-3,-57,118,50,-18,4,0,12,12,-35,-7,36,22,13,27,13,-122,73,18,-25,36,14,-13,6,-16,6,-10,-2,-2,25,-66,6,-35,52,1,42,30,1,-5,-38,-29,23,6,1,-6,37,10,-26,1,6,-11,-6,-85,2,-22,-21,-20,0,-111,16,-33,-23,-51,30,-25,-45,27,-26,-12,6, 
  /* [0][1][][] */ -64,-76,75,-34,-49,91,21,127,-53,-21,-3,-122,25,-114,78,33,-1,-63,-15,89,53,-69,43,50,-108,-11,127,-21,-24,63,118,-113,-127,97,-87,-57,-34,31,-28,99,-47,-26,-4,52,-50,127,-25,63,15,91,17,-4,20,-55,32,35,127,124,-67,-85,127,-35,-35,127,67,-37,-16,-1,127,39,127,95,-40,102,-6,11,14,16,-29,9,-45,124,-85,109,2,35,-54,29,77,-127,-32,-3,127,-70,-20,1, 68,126,58,-114,127,73,90,39,-127,127,127,-44,-65,-127,-127,127,127,-63,-123,-46,106,87,-127,127,-94,-92,-52,127,-127,109,-127,-127,-91,127,104,127,127,-127,-111,127,-61,-95,115,-127,-127,-32,-127,-127,127,-110,86,40,127,127,127,-127,96,-127,-127,127,17,-77,-127,-99,-127,127,-127,127,-121,-127,-106,-84,-127,-81,127,127,-127,127,-77,127,127,31,-45,-127,59,127,95,45,127,17,127,9,-70,36,127,-127, -55,-16,-51,38,-59,-93,38,-25,14,-34,-31,100,1,95,14,11,0,65,-3,127,0,-89,-45,10,-88,114,-87,-20,-70,-17,14,-73,-75,40,1,-22,-28,44,-67,49,127,-4,-41,35,-39,-54,16,43,10,110,-12,5,-31,-74,10,24,94,2,-2,20,-35,127,93,-50,-42,13,31,-11,-75,119,-21,-80,2,-55,-13,-22,29,16,75,-37,-73,-44,58,14,-50,-14,69,22,21,69,-44,13,-41,96,-24,-1, 
  /* [0][2][][] */ -69,1,-4,-20,11,-43,65,30,50,-29,-38,-1,16,20,-26,8,-6,65,9,3,-59,-79,0,-9,-44,-56,35,-68,90,38,25,22,16,-4,-17,-50,-5,37,0,8,-16,-6,-68,111,4,38,10,35,-16,-31,7,-19,25,-1,17,18,-68,25,-22,14,14,-4,-17,-2,-1,-45,-45,15,-28,17,24,33,13,-19,37,7,19,6,-77,-12,-10,-7,15,14,-127,14,15,-45,-55,-49,-28,-55,14,59,-18,-7, 118,33,-127,-34,-74,-26,34,31,-67,-27,-20,-112,-80,119,-12,37,4,-50,-7,-122,91,-57,-41,-2,-120,127,-58,20,-35,-22,-9,-5,-64,16,25,2,-23,-26,127,61,11,-14,66,-31,-35,81,-67,-45,-33,-8,-127,-127,-48,-25,9,43,-69,-7,4,38,-8,-20,11,-44,-57,33,59,-23,118,115,-25,-66,12,-56,10,3,100,4,52,23,11,-95,-54,3,5,18,127,40,-57,47,-18,-121,45,83,-9,29, -55,10,-19,27,13,-66,-127,6,-16,-8,-18,12,12,-25,18,3,-6,-12,9,19,-54,-73,13,2,-4,-102,15,3,-46,-40,-7,9,42,-23,-13,-31,-35,6,46,-27,21,-1,-50,-28,4,73,22,13,-9,-7,7,-9,22,3,3,0,-60,-14,-5,-40,-11,7,85,-10,34,0,-4,29,4,9,-7,28,-16,17,10,13,38,-1,75,-14,1,-5,-7,-17,73,11,49,-39,61,45,-16,-63,-3,5,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0055748466402292252, 0.0040294546633958817, 0.0051176552660763264, 0.0083625605329871178, 0.0089658945798873901, 0.0067313853651285172, 0.002272370969876647, 0.0044158650562167168, 0.010408489964902401, 0.0052831349894404411, 0.011648045852780342, 0.0049488767981529236, 0.011969221755862236, 0.0091301267966628075, 0.01503849308937788, 0.0062599573284387589, 0.0083590615540742874, 0.0064689274877309799, 0.0077613112516701221, 0.0032609787303954363, 0.0028960644267499447, 0.002212712774053216, 0.0058586159721016884, 0.0033171272370964289, 0.0034543310757726431, 0.0044921832159161568, 0.0066599100828170776, 0.0079029062762856483, 0.0035322229377925396, 0.017811719328165054, 0.015135925263166428, 0.010464251972734928, 0.004951003473252058, 0.0057470998726785183, 0.0090703759342432022, 0.021073071286082268, 0.017641758546233177, 0.010377916507422924, 0.013309383764863014, 0.0034819163847714663, 0.0087623829022049904, 0.0078595550730824471, 0.016037702560424805, 0.0046919635497033596, 0.014199753291904926, 0.0039290115237236023, 0.0041847415268421173, 0.010609869845211506, 0.032713372260332108, 0.0047144093550741673, 0.015889791771769524, 0.0064383530989289284, 0.0066580669954419136, 0.0079960133880376816, 0.0075167343020439148, 0.0046201529912650585, 0.0061858771368861198, 0.020602742210030556, 0.0019659488461911678, 0.0078618312254548073, 0.011543446220457554, 0.013968106359243393, 0.0053327661007642746, 0.0055699991062283516, 0.0056761922314763069, 0.0050642853602766991, 0.010385971516370773, 0.013245478272438049, 0.0089137312024831772, 0.0061708549037575722, 0.0086636319756507874, 0.0038886924739927053, 0.010864496231079102, 0.0057909642346203327, 0.0066147753968834877, 0.011346322484314442, 0.0045671784318983555, 0.0032448931597173214, 0.0030239918269217014, 0.0072633582167327404, 0.0094946948811411858, 0.0085531622171401978, 0.0074731032364070415, 0.0099233901128172874, 0.0024400646798312664, 0.0038969095330685377, 0.003309708321467042, 0.020851355046033859, 0.0087401950731873512, 0.0048286896198987961, 0.014821931719779968, 0.0018114045960828662, 0.0061064478941261768, 0.0039896378293633461, 0.014803793281316757, 0.011767959222197533, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2725, 12554, 12143, 27532, 21346, -3899, -2312, 10267, 28447, -4818, 17391, 5286, 13272, 22839, 23218, 1704, 2632, 7920, 11955, 4361, -189, 1324, 12611, -1207, 5895, 523, 14067, 10134, 7916, 51686, 70584, 20489, 8933, -554, 13568, 3510, 1731, 5449, 20038, -1115, 18428, 9068, 25169, -4541, 33154, 7285, 8038, 23362, 61119, 11505, -261, 8701, -3737, 147, -2345, 7272, -310, 25731, 6728, 10086, 6227, 15174, 6617, 5764, 10799, 19796, 8050, -4977, 8074, -4370, 6018, 13128, 25331, 5156, -6372, -5171, 5912, 286, 3565, -1968, 23967, 18995, 6640, 21891, 5144, 179, 8872, 104437, 11153, 10484, 6506, 58, 6258, 8974, 5728, 10672, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00018437333346810192, 0.00011899846867891029, 0.00014492703485302627, 8.611907105660066e-05, 0.00013959825446363539, 0.00026599809643812478, 0.00033240151242353022, 0.00015960355813149363, 8.3112267020624131e-05, 0.00028581626247614622, 0.0001578983647050336, 0.00017188157653436065, 9.1720175987575203e-05, 9.9323347967583686e-05, 0.00010156445205211639, 0.00032107147853821516, 0.00017668056534603238, 0.00015909090870991349, 0.0001918494381243363, 0.00024768791627138853, 0.00024762708926573396, 0.00019299349514767528, 0.00015741577954031527, 0.00051957496907562017, 0.00046117135207168758, 0.00019689508189912885, 0.00016174136544577777, 0.00014823177480138838, 0.00020613463129848242, 6.8427310907281935e-05, 4.014077057945542e-05, 0.00012138405145378783, 0.00018819184333551675, 0.00028788691270165145, 0.00014764582738280296, 0.00015755867934785783, 0.00028922836645506322, 0.00027676936588250101, 0.00013311629300005734, 0.0005157461273483932, 9.8541138868313283e-05, 0.00017387418483849615, 0.00010497790208319202, 0.00023675712873227894, 9.7794239991344512e-05, 0.00018825038569048047, 0.00021739992371294647, 0.00011589251516852528, 6.7246022808831185e-05, 0.00018201350758317858, 0.00021498477144632488, 0.0001962659734999761, 0.00028543418738991022, 0.00016246545419562608, 0.0004512619343586266, 0.0001601397234480828, 0.00020942890841979533, 7.3838549724314362e-05, 0.00030727227567695081, 0.00014209453365765512, 0.00025558000197634101, 9.3016271421220154e-05, 0.00022177485516294837, 0.00017527404997963458, 0.00022370967781171203, 0.00010023607319453731, 0.00016130009316839278, 0.00025995975011028349, 0.00021404110884759575, 0.00018037673726212233, 0.00018615653971210122, 0.00012286604032851756, 8.3741673734039068e-05, 0.00020578344992827624, 0.00024125142954289913, 0.00025952918804250658, 0.00028517661849036813, 0.00021497617126442492, 0.00021931611991021782, 0.00020366524404380471, 8.7398846517316997e-05, 8.5829226009082049e-05, 0.00013172256876714528, 8.793455344857648e-05, 0.0002182183088734746, 0.00025849498342722654, 0.0002599444123916328, 3.7256188079481944e-05, 0.00012473532115109265, 0.00021448626648634672, 0.00019105005776509643, 0.0004874449223279953, 0.00023436624906025827, 0.00017175008542835712, 0.00018707454728428274, 0.00015005111345089972, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -4,43,-19,55,27,-3,33,16,80,37,-44,127,33,-79,53,-100, 
  /* [1][0][][] */ 28,69,-7,-34,48,-29,126,-127,-7,86,-4,-20,21,-54,23,38, 
  /* [2][0][][] */ -127,63,-30,-27,-51,-45,61,84,-19,83,55,-5,-20,32,41,-69, 
  /* [3][0][][] */ -59,41,13,63,-22,48,36,68,-2,87,-127,-6,42,-52,-94,-37, 
  /* [4][0][][] */ -64,-17,57,76,-75,29,28,124,13,-63,-24,-46,-10,-15,-127,-39, 
  /* [5][0][][] */ -23,-47,71,-12,8,-39,-17,0,-38,77,-29,-127,-7,49,-65,-33, 
  /* [6][0][][] */ -4,19,28,-32,63,86,-93,-63,-36,-21,88,-4,127,-19,3,-34, 
  /* [7][0][][] */ 1,9,127,28,-105,-59,-12,-5,-62,12,-107,-67,9,3,54,17, 
  /* [8][0][][] */ -32,22,95,82,-61,127,19,76,80,17,-44,-50,-3,8,-93,-43, 
  /* [9][0][][] */ 32,-83,28,68,-3,1,23,42,96,57,72,14,-42,52,-127,-26, 
  /* [10][0][][] */ -59,-115,25,-22,-113,-16,45,84,79,127,74,-38,-44,115,98,3, 
  /* [11][0][][] */ 102,13,61,-107,72,-65,-127,-119,-50,65,58,-20,121,-1,26,-31, 
  /* [12][0][][] */ -23,15,33,-10,-74,-78,-127,9,-28,-72,-53,-12,42,123,85,48, 
  /* [13][0][][] */ -52,-127,-27,78,20,-112,-17,24,83,6,28,-67,53,69,119,56, 
  /* [14][0][][] */ -11,-26,31,21,14,18,11,93,22,33,-29,-39,-24,24,-65,127, 
  /* [15][0][][] */ 2,-27,1,68,32,18,93,-16,0,-127,37,-38,-18,-13,-1,-29, 
  /* [16][0][][] */ 45,-88,-48,37,-23,-7,46,-59,111,69,84,15,-23,107,60,127, 
  /* [17][0][][] */ -26,-55,78,127,101,24,-3,-43,95,-51,-4,-16,13,58,-48,9, 
  /* [18][0][][] */ -22,-23,17,12,-106,15,7,51,-20,-34,-14,-58,-21,-127,36,-13, 
  /* [19][0][][] */ 81,-23,10,-59,91,24,-79,58,102,-30,47,15,7,55,20,127, 
  /* [20][0][][] */ 91,-17,73,-72,6,10,-44,22,-20,-50,90,-27,17,23,-21,127, 
  /* [21][0][][] */ -70,-13,-37,-66,49,67,-95,-105,-64,127,-28,-16,-111,-54,-13,-24, 
  /* [22][0][][] */ 22,-13,18,-42,9,-44,19,-20,-127,29,-22,-26,-19,-17,57,2, 
  /* [23][0][][] */ -8,16,4,-10,-1,6,14,-13,-22,-11,65,-17,127,0,6,-39, 
  /* [24][0][][] */ -12,-15,-1,-74,-15,-26,49,-14,-62,-9,0,-127,5,-97,42,24, 
  /* [25][0][][] */ -43,24,-96,10,79,-52,-55,-127,-37,55,22,-6,1,-52,56,-58, 
  /* [26][0][][] */ 45,3,49,-97,127,-32,4,-11,52,-17,93,-59,-13,86,-33,110, 
  /* [27][0][][] */ 86,-4,28,-19,-45,-49,-4,-22,-20,14,-127,10,-13,-14,9,56, 
  /* [28][0][][] */ -127,-38,-125,-31,65,-34,81,-17,18,70,-96,81,56,-3,-29,25, 
  /* [29][0][][] */ -48,-14,-27,127,2,41,29,-61,-28,-16,-100,56,29,-107,7,8, 
  /* [30][0][][] */ 107,62,127,-61,89,106,-20,15,-79,-59,106,17,-24,-4,-47,82, 
  /* [31][0][][] */ 3,-93,5,-59,2,-55,27,-40,-7,22,115,2,-39,93,39,127, 
  /* [32][0][][] */ -22,74,-17,41,-127,23,-65,-35,-43,-43,5,38,15,54,16,45, 
  /* [33][0][][] */ 13,-10,8,127,-8,-37,26,-52,-119,46,75,-22,7,11,15,108, 
  /* [34][0][][] */ 3,2,4,24,108,-36,-127,-70,-35,125,-48,25,3,64,-2,31, 
  /* [35][0][][] */ 120,4,19,-24,9,-127,-19,-20,-17,-34,-77,22,72,-15,7,36, 
  /* [36][0][][] */ 25,6,-127,-1,33,13,-36,13,-24,-27,1,6,3,23,-5,26, 
  /* [37][0][][] */ 26,10,127,-40,-5,53,29,-81,-20,34,-19,42,40,-15,-11,-5, 
  /* [38][0][][] */ -127,4,-9,25,19,87,44,14,4,-39,25,-43,-72,18,-37,-27, 
  /* [39][0][][] */ 9,-4,7,35,41,2,-127,50,20,54,-19,-17,-9,-19,-18,-6, 
  /* [40][0][][] */ 4,67,-22,127,9,16,106,110,-27,-69,-66,26,81,0,-89,-96, 
  /* [41][0][][] */ 20,19,-40,-11,-45,-5,127,103,-27,81,-10,15,9,59,53,-35, 
  /* [42][0][][] */ 55,33,-37,-8,-26,-17,-13,-12,4,-127,96,21,-20,4,-34,-34, 
  /* [43][0][][] */ -40,-19,12,-45,30,11,-34,-28,-15,62,-55,-17,-127,-23,32,16, 
  /* [44][0][][] */ 15,2,9,0,-3,-29,-2,-31,127,-8,17,53,16,78,0,41, 
  /* [45][0][][] */ -9,-102,-14,-49,-41,-27,-10,78,-6,-86,-60,-8,34,33,34,127, 
  /* [46][0][][] */ -58,36,-26,110,-102,-30,-2,-64,-127,28,-63,-3,7,50,4,-47, 
  /* [47][0][][] */ -43,32,-104,127,6,86,-56,20,-21,45,38,112,22,-10,81,-15, 
  /* [48][0][][] */ -78,26,55,-76,-6,-27,-20,-17,-17,50,22,6,-40,127,123,7, 
  /* [49][0][][] */ 43,27,49,118,47,53,-12,-5,42,-35,-127,11,30,-58,-85,-110, 
  /* [50][0][][] */ 10,104,8,-90,44,33,-18,86,127,0,12,28,44,-35,48,-47, 
  /* [51][0][][] */ 7,-9,22,3,46,-8,-94,-127,-9,-45,-13,12,-42,-15,9,-8, 
  /* [52][0][][] */ 26,12,-11,18,56,26,-74,104,-71,127,-51,-14,47,120,10,-37, 
  /* [53][0][][] */ -12,119,0,-57,-14,7,24,-1,-83,-28,-38,65,14,-109,-127,24, 
  /* [54][0][][] */ -2,-5,23,46,49,-12,9,-37,-18,26,-1,-15,-13,127,-41,-7, 
  /* [55][0][][] */ -127,72,83,-23,17,-13,12,22,-39,7,70,-21,-51,-23,87,-19, 
  /* [56][0][][] */ 44,-34,32,-69,36,-28,-17,24,79,-24,41,84,14,5,127,33, 
  /* [57][0][][] */ -95,37,12,114,-27,71,22,127,-17,6,-28,-30,17,93,17,-2, 
  /* [58][0][][] */ 29,126,0,-127,18,18,-18,-6,100,-9,-29,81,49,-87,3,34, 
  /* [59][0][][] */ -12,54,23,-63,-17,14,48,-7,-12,5,43,-10,-16,-127,-38,0, 
  /* [60][0][][] */ 64,-37,127,-46,-53,111,57,-32,-14,53,-70,-16,10,19,5,-21, 
  /* [61][0][][] */ -5,43,-45,-39,-33,25,107,127,-14,42,-56,55,-2,44,8,-40, 
  /* [62][0][][] */ 53,-3,3,-19,-35,46,-22,7,-35,-22,-15,-9,110,-127,85,9, 
  /* [63][0][][] */ -17,-39,-16,-64,24,11,-127,-96,-36,105,-18,-13,99,28,47,-6, 
  /* [64][0][][] */ -5,-6,31,36,36,-19,-67,-123,29,-127,3,-38,-36,2,-1,14, 
  /* [65][0][][] */ -127,-12,32,-105,49,90,35,-65,-97,47,45,-2,60,5,-9,-34, 
  /* [66][0][][] */ 69,-12,127,40,-61,46,-78,87,-3,-6,69,-64,27,70,-113,-38, 
  /* [67][0][][] */ 8,-31,-46,63,58,-34,-96,-116,49,-127,-52,-36,-88,49,-26,-2, 
  /* [68][0][][] */ 24,-1,-64,44,-40,-40,-16,-5,-33,-15,59,7,-78,57,127,-22, 
  /* [69][0][][] */ -4,-3,-67,32,-28,-127,44,82,12,-33,40,17,76,-20,10,6, 
  /* [70][0][][] */ 20,-1,-25,-37,-59,-1,127,118,12,22,-60,2,19,35,-2,-36, 
  /* [71][0][][] */ 23,-45,-28,-68,55,14,6,76,-39,-32,-19,29,50,-127,81,14, 
  /* [72][0][][] */ 73,38,-42,47,40,-50,-70,-111,12,92,-95,35,-4,57,15,127, 
  /* [73][0][][] */ -62,-127,-25,-51,-101,-37,20,-10,-12,31,-45,-69,15,-66,73,-4, 
  /* [74][0][][] */ -30,8,53,102,-1,-3,-88,127,23,5,-56,-22,-33,-11,36,-4, 
  /* [75][0][][] */ -35,-19,-48,37,-60,71,72,127,35,70,9,-28,-63,74,0,23, 
  /* [76][0][][] */ 30,-28,-54,-2,49,-52,-127,-115,-24,-19,13,-20,25,-19,25,-27, 
  /* [77][0][][] */ -38,-12,-43,-24,-73,-30,-8,-46,127,2,-47,6,-20,64,44,-68, 
  /* [78][0][][] */ -127,-106,-17,114,42,46,-27,78,22,-83,-83,26,37,28,69,56, 
  /* [79][0][][] */ 20,-12,10,-80,127,48,56,8,48,28,-8,42,-29,-52,2,-47, 
  /* [80][0][][] */ -20,-51,79,-123,15,-30,-26,36,-84,-42,-3,-51,-24,127,-31,26, 
  /* [81][0][][] */ -28,28,103,47,-66,-15,-49,51,11,-57,-42,-37,-37,27,-127,-3, 
  /* [82][0][][] */ -75,-32,46,-127,6,-60,-12,-54,-32,-67,-34,-108,-43,-114,-64,16, 
  /* [83][0][][] */ -16,-2,-48,-79,-56,11,17,1,-95,-17,30,-108,12,-127,43,54, 
  /* [84][0][][] */ 127,53,41,80,-82,-28,-6,41,-22,-22,95,-20,-113,49,103,-80, 
  /* [85][0][][] */ -9,3,6,-25,26,4,-25,125,-106,-75,-58,-1,-36,42,127,-95, 
  /* [86][0][][] */ 40,21,16,39,-2,42,-99,63,-56,-50,14,-14,23,-127,15,6, 
  /* [87][0][][] */ 127,-28,-15,-25,-21,10,20,-7,-8,42,-115,26,-7,-19,5,-13, 
  /* [88][0][][] */ 7,110,-68,-16,-2,-14,48,-34,80,9,23,9,-43,-21,105,-127, 
  /* [89][0][][] */ 44,45,-83,0,-46,-32,10,-32,57,10,6,-31,-42,-4,-16,-127, 
  /* [90][0][][] */ 0,-24,19,-56,-64,6,127,-52,96,-55,1,-107,37,-7,-70,-5, 
  /* [91][0][][] */ 64,22,11,-28,-31,-35,-20,-73,-59,26,13,90,71,29,29,127, 
  /* [92][0][][] */ 45,23,-13,13,47,-1,-77,-127,32,-43,3,-23,-13,-21,-6,-36, 
  /* [93][0][][] */ 108,-20,53,-127,-34,-10,-53,43,20,-49,85,-15,-58,87,-22,31, 
  /* [94][0][][] */ -67,43,-46,57,73,-127,-32,-1,28,-33,63,37,20,30,-12,-16, 
  /* [95][0][][] */ 0,90,-19,-88,-4,-14,-12,-30,60,-16,-127,-43,-48,26,-55,-42, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00073121441528201103, 0.00047194131184369326, 0.00057477253722026944, 0.00034154346212744713, 0.00055363890714943409, 0.001054933643899858, 0.0013182859402149916, 0.00063297885935753584, 0.0003296186332590878, 0.001133531448431313, 0.00062621611868962646, 0.00068167276913300157, 0.00036375710624270141, 0.00039391088648699224, 0.00040279896347783506, 0.0012733516050502658, 0.00070070527726784348, 0.00063094572396948934, 0.00076086423359811306, 0.00098231656011193991, 0.00098207523114979267, 0.00076540146255865693, 0.00062430225079879165, 0.0020606054458767176, 0.0018289799336344004, 0.00078087497968226671, 0.00064145727083086967, 0.00058787898160517216, 0.00081751850666478276, 0.00027137889992445707, 0.00015919606084935367, 0.00048140241415239871, 0.00074635841883718967, 0.0011417435016483068, 0.0005855551571585238, 0.00062486896058544517, 0.0011470636818557978, 0.0010976518969982862, 0.00052793184295296669, 0.0020454204641282558, 0.00039080868009477854, 0.00068957533221691847, 0.00041633652290329337, 0.00093896558973938227, 0.00038784652133472264, 0.00074659055098891258, 0.00086219602962955832, 0.000459623261122033, 0.00026669399812817574, 0.00072185543831437826, 0.0008526176679879427, 0.00077837996650487185, 0.0011320160701870918, 0.00064432894578203559, 0.0017896797508001328, 0.00063510524341836572, 0.00083058339077979326, 0.0002928395988419652, 0.0012186247622594237, 0.00056353904074057937, 0.0010136160999536514, 0.0003688973665703088, 0.00087954674381762743, 0.00069512712070718408, 0.00088722014334052801, 0.00039753070450387895, 0.00063970719929784536, 0.0010309859644621611, 0.0008488751482218504, 0.00071536411996930838, 0.00073828647146001458, 0.00048727987450547516, 0.00033211481058970094, 0.00081612571375444531, 0.00095678976504132152, 0.0010292783845216036, 0.0011309946421533823, 0.0008525835582986474, 0.00086979556363075972, 0.00080772506771609187, 0.00034661896643228829, 0.00034039394813589752, 0.00052240438526496291, 0.00034874354605562985, 0.00086544168880209327, 0.0010251767234876752, 0.0010309250792488456, 0.00014775597082916647, 0.00049469334771856666, 0.00085064058657735586, 0.00075769389513880014, 0.0019331794464960694, 0.00092948350356891751, 0.00068115128669887781, 0.00074192724423483014, 0.00059509440325200558, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -6842, 4566, -15523, 30950, 19495, -4757, -19159, 807, 11047, -3987, 7450, 17968, -30745, 19197, 42526, -19604, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00050904433010146022, 0.00029289143276400864, 0.0003062109462916851, 0.00021242354705464095, 0.00040926790097728372, 0.00034997955663129687, 0.00027402190607972443, 0.00038033947930671275, 0.00017700149328447878, 0.00030107429483905435, 0.00039846022264100611, 0.00058722426183521748, 0.00034183386014774442, 0.00052982952911406755, 0.00043003633618354797, 0.00031676708022132516, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 6,12,-2,7,45,58,11,-15,33,-8,24,17,-2,-8,19,65,13,1,-2,23,73,-37,21,-11,-10,-30,-27,-108,-7,0,49,40,110,6,20,3,10,-11,-22,12,-31,16,13,-23,-9,-39,0,6,1,8,6,-5,-22,-5,7,-9,25,26,-14,-35,-49,23,-18,-10,-15,-2,41,-1,14,7,20,-12,-59,-10,-12,-10,-2,-67,0,-19,29,-6,-39,-52,16,-22,36,33,-9,-13,4,-22,49,26,-13,127, 
  /* [1][0][][] */ 68,-105,62,90,-11,-29,19,-60,-21,-77,-17,34,14,-60,-20,-34,-102,6,18,45,-22,-105,-32,0,104,-41,-77,-6,-29,53,-8,51,-7,32,-47,17,-20,-10,61,-20,-23,-88,48,-39,-60,20,47,-21,33,16,12,-53,75,-69,21,-20,6,14,9,-88,23,-67,12,-78,1,-66,53,48,51,55,-60,17,-127,36,-1,71,12,70,5,-6,25,-2,-32,33,-100,30,-24,57,-41,30,7,-5,18,-37,31,13, 
  /* [2][0][][] */ 32,-6,20,-18,14,16,-3,29,72,-12,0,48,1,10,72,-1,-20,-17,-4,-21,-6,-48,16,-35,-20,1,-45,14,-5,16,97,-45,25,-76,2,31,18,127,-32,-17,5,0,-4,30,-35,-39,-46,25,53,22,-25,-7,34,13,-1,-24,-67,9,26,30,2,28,58,118,28,-67,31,-70,12,-14,9,0,-28,18,11,18,16,57,13,30,35,80,40,-5,11,-5,0,7,20,14,-7,-35,-22,-4,-13,65, 
  /* [3][0][][] */ -9,-25,-28,35,21,-28,-25,-41,4,47,0,17,-11,-15,46,-29,23,-53,11,-9,-2,-45,-51,4,-28,21,-2,13,33,-49,61,-16,5,-39,-34,42,-11,5,8,4,28,-73,8,-34,0,22,-25,25,-127,67,-9,26,-118,-39,-27,-39,16,5,-17,60,2,26,6,4,6,-80,-22,17,47,18,-24,-6,-39,39,16,-21,-53,-51,22,-39,7,-26,11,85,26,63,-1,19,10,3,0,-18,-65,-5,2,-30, 
  /* [4][0][][] */ 7,-33,11,-36,14,-5,-20,17,-23,-43,-18,0,13,55,26,8,38,-12,1,15,11,49,72,12,-21,-1,34,3,10,-6,21,9,-20,26,14,6,41,-12,-1,4,34,30,-53,-29,39,-18,0,-40,23,61,-10,1,-14,6,-7,-14,-20,-28,11,68,25,8,29,-2,3,-113,18,-20,-14,19,9,5,-21,11,-29,9,-34,64,51,4,10,-16,127,-28,13,-39,-29,-1,73,8,15,35,-6,36,-13,-29, 
  /* [5][0][][] */ -1,-6,7,7,2,20,12,98,60,-4,-14,-22,3,30,51,21,-8,-5,-16,-38,-28,7,16,-33,12,22,31,53,45,20,59,50,-31,20,-8,-6,-30,-59,-18,-10,-12,-5,5,-6,79,12,2,18,22,-2,-26,17,-29,1,13,-12,-36,-19,-10,45,-31,31,9,-29,4,24,-9,-1,0,38,-3,-15,26,17,-6,-3,-2,25,2,112,8,-30,26,37,-2,-13,9,-23,-14,-18,31,-127,-23,-24,-4,-103, 
  /* [6][0][][] */ -39,-6,17,-65,1,-75,-16,28,0,9,-23,-32,58,-58,-14,0,-14,-54,44,8,12,12,7,31,127,-8,-12,38,22,1,6,-18,-31,11,-28,-9,34,17,36,51,-37,-47,-65,-30,-28,-28,50,-124,36,17,60,28,28,13,-19,-55,59,-16,-11,8,26,27,-26,33,63,87,31,-19,-22,-17,-6,-14,24,-1,57,-21,-48,44,20,40,-18,7,76,-39,28,73,45,-37,54,-49,-41,-10,-26,9,-30,8, 
  /* [7][0][][] */ 16,7,16,-20,-15,5,-27,-39,4,3,-26,-5,0,-74,35,17,-12,-21,-19,-28,6,-46,-54,-14,-27,-2,-9,-4,7,4,-6,-6,-10,-19,-18,-23,-3,-12,-32,3,4,-26,-39,29,1,29,-15,79,-23,34,-19,-20,-25,-10,3,-44,43,4,-7,-10,-3,8,-18,-6,18,51,13,-19,-24,-19,-24,18,-9,2,11,20,49,1,9,-5,11,-26,36,9,-21,127,-15,6,-46,2,-12,4,-44,-12,7,-5, 
  /* [8][0][][] */ -74,40,-59,-4,74,11,-35,11,13,89,-40,21,13,39,64,-18,-5,23,-83,13,17,16,-35,18,-45,-31,20,40,50,-93,-4,-1,17,20,-4,-4,-5,39,-53,17,28,33,19,-127,-34,-11,43,-37,-50,40,6,69,-86,65,8,0,22,-23,-42,-12,-14,-31,17,27,-32,55,35,-26,1,0,43,68,3,44,28,32,14,-96,7,-36,-26,-10,12,21,-68,47,32,-41,-10,56,-15,3,28,-15,23,0, 
  /* [9][0][][] */ 54,-46,-19,-17,11,51,21,29,28,-11,-2,44,-12,-35,14,20,-7,6,23,1,-6,33,-18,-32,35,11,45,-20,-13,-28,0,9,-6,23,20,29,21,46,-24,39,19,15,8,-84,42,-20,11,-127,-4,4,-10,21,-16,22,-12,8,-53,28,-15,40,31,14,24,16,2,86,36,31,15,4,13,-24,-36,9,-30,19,43,10,3,2,-5,-15,19,-21,-9,7,-23,6,-39,23,-8,-11,36,13,-8,2, 
  /* [10][0][][] */ 22,56,-12,13,57,-116,12,4,3,54,61,-23,14,13,23,-54,25,37,-13,33,-63,15,34,-14,-35,-12,-50,41,-2,35,24,56,12,-16,36,4,87,10,-22,1,-6,75,36,-24,-47,-31,-14,9,-4,-40,-37,5,2,-4,5,-17,2,39,-24,-10,-1,25,-32,19,6,47,47,17,3,16,58,49,-37,-39,-45,-29,-8,15,-20,8,48,27,-64,-43,71,-60,127,3,3,-2,19,9,99,38,-26,-104, 
  /* [11][0][][] */ 43,45,-31,35,5,53,81,-1,4,-18,-22,-15,-1,1,40,7,5,-10,-120,2,-6,24,16,7,-56,-26,1,-7,8,39,-2,-2,-11,10,-11,8,-2,25,6,38,1,26,89,-117,35,-38,-9,-12,-127,18,1,-57,43,23,-12,14,-6,-17,1,-3,10,-13,17,12,-65,70,-13,-3,40,12,53,11,-49,-25,5,49,3,-43,-55,0,2,7,101,62,-16,-10,-18,-12,-11,26,-4,-4,6,14,-6,28, 
  /* [12][0][][] */ -33,5,24,6,-40,71,41,27,124,8,-8,-13,8,13,-37,-31,47,44,12,95,65,90,37,18,29,-8,31,-53,-127,31,31,-69,13,20,-9,-24,7,-5,57,23,-36,-26,39,24,-2,18,20,-11,48,-3,-85,18,10,-9,2,-16,72,-20,15,50,15,7,44,-5,-19,37,-62,2,24,5,23,-27,23,1,-115,0,18,-3,14,-89,-16,20,56,57,-25,-31,-22,-61,19,3,15,94,27,-19,14,43, 
  /* [13][0][][] */ 34,-30,-36,19,27,-17,3,-7,8,11,10,2,12,-5,8,-13,11,-76,-28,-3,-5,-37,-14,-7,-1,12,-4,14,2,-42,-4,16,-1,-14,3,36,18,19,6,6,2,11,22,25,25,22,-24,-127,14,6,15,11,-20,2,9,5,-23,23,13,16,0,22,-20,7,11,-24,-13,-62,1,12,-22,-52,-17,42,6,17,-38,5,15,3,25,-20,-27,29,14,26,0,23,-15,0,26,-11,-3,6,-17,-4, 
  /* [14][0][][] */ -117,-56,28,57,25,-21,-49,16,-36,-12,-23,4,67,12,-116,9,58,-6,-6,29,-31,2,35,2,-105,-4,31,-20,-37,-63,-39,-15,11,-2,31,-61,13,-1,7,29,4,8,-2,-30,11,104,76,43,-127,33,-12,37,-73,-27,53,-9,18,18,79,40,22,44,15,36,8,-3,-58,33,9,75,-30,-75,-76,-3,-19,54,21,39,90,-9,32,18,34,5,36,11,42,6,23,53,72,7,0,34,-3,-33, 
  /* [15][0][][] */ 87,-15,23,1,-30,46,28,22,-7,27,-13,-6,-75,-29,5,34,4,33,53,4,10,52,-94,54,23,-11,46,-13,28,57,-53,-61,25,-66,67,-11,45,-28,-49,-100,-26,51,17,21,5,26,-3,-39,100,-48,-56,17,38,-127,68,-98,-7,-50,14,6,-123,19,20,58,92,-50,-65,54,-51,77,-10,23,34,-5,25,-19,-5,-25,67,-21,3,11,25,72,23,-17,-1,-54,14,-9,75,4,-58,34,-4,-22, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.021634383127093315, 0.012447886168956757, 0.013013965450227261, 0.0090280007570981979, 0.017393885180354118, 0.014874131418764591, 0.01164593081921339, 0.016164427623152733, 0.0075225634500384331, 0.012795657850801945, 0.016934558749198914, 0.024957031011581421, 0.014527939260005951, 0.022517753764986992, 0.018276544287800789, 0.01346260029822588, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10474, -10292, 3667, 64765, -1467, -4969, -8941, -1944, -3375, 486, 3183, -1313, 229, -9219, 6087, -5463, -1137, 14742, 23641, 2927, -378, -4044, 1499, 1662, 19103, -1485, -816, -3352, -7674, -7949, 7895, -9965, -518, -1954, 1493, 19240, 1246, -3515, 21434, -282, -1920, 2771, -8683, -7997, -8176, 70403, -461, 19429, 31753, -13050, -823, 10819, 5325, -252, -5491, 3354, -15282, 3334, 486, -7358, -2978, -336, -13736, -1067, -25, 17712, 31352, 33532, -13300, 326, -5225, -1636, 42074, 10879, 493, -1373, 17474, 32188, -555, -10724, -1347, -5166, 707, -2881, 49, -1386, 1277, -987, 1356, -3363, 105, 2520, -1531, -631, 848, 50161, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00020473562472034246, 0.00011295911826891825, 0.00022264738800004125, 3.3132808312075213e-05, 0.00015868527407292277, 0.00017429402214474976, 0.00034028253867290914, 7.6870099292136729e-05, 0.0001354451960651204, 0.00044783507473766804, 0.00015464678290300071, 0.00032647972693666816, 7.6237709436099976e-05, 0.00031935205333866179, 0.00016738189151510596, 0.0001505574764451012, 9.7705313237383962e-05, 0.00027432662318460643, 6.7621818743646145e-05, 0.00018743408145383, 4.5934219087939709e-05, 0.00016984993999358267, 0.00013266716268844903, 0.00038094364572316408, 0.00018496735719963908, 0.00019462835916783661, 0.00013330076762940735, 0.00018632363935466856, 9.0328430815134197e-05, 0.0001185015426017344, 0.00011052740592276677, 0.0001599643292138353, 0.00012176377640571445, 0.00013886293163523078, 0.00019694743969012052, 0.00012789212632924318, 0.00033556559355929494, 0.00011590215581236407, 4.9872538511408493e-05, 0.00015184890071395785, 0.00016219803364947438, 0.00026347421226091683, 0.000363312748959288, 0.00015081359015312046, 0.0001942721864907071, 5.5930715461727232e-05, 0.00022903153148945421, 0.00017357121396344155, 8.337958570336923e-05, 0.0001722528540994972, 0.00014697189908474684, 0.00011441351671237499, 0.00023005800903774798, 0.00024885628954507411, 0.00033752931631170213, 0.00038202528958208859, 0.00023870488803368062, 0.0002359311911277473, 0.00010912442667176947, 8.3401129813864827e-05, 0.00028115839813835919, 0.00013374556147027761, 0.00025319273117929697, 0.00012611156853381544, 0.00017249691882170737, 0.00016115448670461774, 8.7297426944132894e-05, 5.3789743105880916e-05, 0.00031480556936003268, 0.00025950762210413814, 0.00020007167768198997, 8.3118116890545934e-05, 0.00013525228132493794, 0.00013688213948626071, 0.00017839396605268121, 0.00023217046691570431, 0.00054336013272404671, 5.5539927416248247e-05, 0.0002713850699365139, 0.00017742232012096792, 0.00016173929907381535, 0.00041874469025060534, 0.00014515942893922329, 0.00015257479390129447, 0.00012971974501851946, 0.00010181229299632832, 0.00013163435505703092, 0.00019015865109395236, 0.00016433715063612908, 0.00011523677676450461, 0.00018754007760435343, 0.00013363486505113542, 0.00014468618610408157, 0.00045305636012926698, 0.0014657704159617424, 7.4415504059288651e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,12,-19,110,-19,26,-63,-55,15,-4,101,-6,5,-8,-4,59,7,22,-29,4,73,-1,31,-37,1,17,43,42,22,17,26,48,-5,27,6,-15,5,52,-54,-25,23,6,24,18,-79,-62,25,-7,-10,-20,-6,-9,52,4,-8,1,-1,-36,27,-27,29,-6,127,31,-12,-13,6,-45,68,36,-5,-5,83,-34,70,8,17,-127,30,58,0,19,127,-16,39,29,-27,-17,36,-7,-15,77,2,21,-1,15, -49,14,-8,9,53,-7,-12,-127,35,14,-127,-2,-18,-13,3,96,19,-26,-13,-16,78,-100,127,26,-62,-32,-107,-17,28,38,-49,18,123,14,-15,-2,-24,127,-62,-127,10,-22,-33,16,48,-127,127,-46,-76,52,51,5,42,-64,32,55,37,40,-89,83,127,34,6,-18,43,-39,-89,0,37,-29,-23,49,-50,-50,102,-2,-30,-59,-32,61,-68,63,-17,10,-10,48,58,-38,-28,54,-13,68,-127,-31,24,-127, -3,3,-24,-78,11,20,33,26,-5,-1,1,65,1,-12,-11,8,-12,21,-16,16,6,23,23,-36,0,-33,8,9,-4,7,50,-77,50,18,8,-25,13,6,-26,-22,9,0,-20,13,24,-40,22,-2,7,-7,8,-6,7,5,-3,8,-9,42,12,4,11,-18,2,-15,-25,-18,24,-46,-107,-5,44,-12,-127,-27,-9,21,10,-10,5,5,-17,24,-45,-3,-40,21,29,39,-27,-15,26,-14,14,7,0,-41, 
  /* [0][1][][] */ -41,62,-18,39,-84,-13,-10,-45,28,96,-42,-22,-31,-26,-4,63,127,-25,-86,-13,60,-127,-32,14,-36,-50,-127,-8,39,39,-48,31,-125,-76,-60,3,66,-1,-47,48,-17,84,0,-2,37,-54,-12,-33,127,47,-1,18,47,9,-37,-19,36,6,-112,127,-36,-91,22,127,-56,-36,-90,127,-36,127,-26,52,-34,-54,38,12,-34,-71,127,49,127,37,5,-1,127,27,-96,49,-39,-33,-105,36,101,103,28,-55, 127,127,127,127,-45,-127,127,28,127,-127,19,-127,-109,127,127,127,-16,-127,-63,-127,127,27,-70,127,127,127,-57,-127,127,127,-127,127,-9,-127,-126,127,-127,-46,87,111,-127,-127,127,127,127,-119,-106,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-31,43,-102,-28,-65,-70,127,127,-67,123,127,-106,-127,127,-49,127,-127,-127,-127,120,-74,127,-42,127,92,127,-36,-127,-24,-105,-127,-125,-23,-127,-18,-127,-127,118, -24,69,-38,4,127,74,-25,54,8,24,-14,-5,-25,-31,-10,-7,-106,-23,-127,37,33,81,-16,-120,-34,-43,124,73,11,41,76,9,127,-45,127,-5,58,8,-98,13,40,23,-25,4,-18,-54,-13,-44,82,20,-12,38,-3,-3,-73,-15,29,18,127,-85,2,127,2,-38,-108,-30,-80,95,15,-16,104,28,-15,-55,12,52,-27,-7,-43,-1,-46,6,44,23,-87,35,127,-47,34,-21,127,-13,-109,36,34,19, 
  /* [0][2][][] */ -4,-38,-23,-64,-3,20,41,33,1,11,-23,49,24,-36,-8,14,37,3,15,25,-7,35,-21,-28,1,-27,8,6,-8,-5,51,-74,-41,74,-32,-26,31,-34,-66,18,13,9,-34,18,11,-83,-10,-1,-9,9,21,-10,11,1,-23,3,-4,38,-46,37,-2,-18,4,16,-3,-10,18,-54,-54,11,-28,-10,-123,-32,2,22,17,-14,57,19,23,25,-45,16,12,26,-25,10,6,27,24,-7,23,41,-6,-30, -28,-8,-29,26,-44,75,-24,71,6,-4,54,-15,127,-9,-19,-15,-3,-38,-55,28,-20,84,-48,-115,-47,-50,102,70,16,47,55,1,-126,71,-18,-24,-28,-27,-127,-3,48,-16,-14,35,-26,-49,-17,-48,-61,25,70,24,-9,-80,29,48,17,21,75,-51,21,-61,-9,-1,21,-25,-127,-59,-8,-27,-60,22,41,-48,-28,-5,-40,24,-58,3,49,36,19,8,5,57,-95,127,17,127,-32,-21,117,-22,46,84, -10,-29,-28,32,13,69,-45,17,5,-5,3,13,11,-52,-11,-6,-46,-5,16,25,-22,10,-25,3,-5,18,0,55,1,1,37,31,16,50,19,-24,-7,-26,-36,7,15,-12,21,10,-70,-39,-12,3,-1,-14,2,-5,-5,9,-17,-9,1,-49,18,-29,-18,48,9,-30,-8,-1,30,-60,48,8,45,-18,39,-53,-22,27,12,8,-8,22,-31,34,92,-17,-17,55,37,-9,114,14,-1,-21,15,-22,-4,-48, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.008701263926923275, 0.004800762515515089, 0.0094625139608979225, 0.0014081442495808005, 0.0067441239953041077, 0.0074074957519769669, 0.014462007209658623, 0.0032669792417436838, 0.0057564210146665573, 0.01903299055993557, 0.0065724882297217846, 0.013875387609004974, 0.003240102669224143, 0.013572461903095245, 0.0071137300692498684, 0.0063986927270889282, 0.0041524758562445641, 0.011658880859613419, 0.0028739271219819784, 0.0079659484326839447, 0.0019522042712196708, 0.0072186221368610859, 0.0056383544579148293, 0.016190104186534882, 0.0078611122444272041, 0.0082717053592205048, 0.0056652822531759739, 0.0079187545925378799, 0.0038389582186937332, 0.0050363154150545597, 0.004697414580732584, 0.0067984838970005512, 0.0051749604754149914, 0.0059016742743551731, 0.0083702662959694862, 0.0054354150779545307, 0.014261537231504917, 0.0049258414655923843, 0.0021195828448981047, 0.0064535783603787422, 0.0068934164009988308, 0.011197653599083424, 0.015440790913999081, 0.0064095775596797466, 0.0082565676420927048, 0.0023770553525537252, 0.0097338398918509483, 0.0073767765425145626, 0.0035436323378235102, 0.0073207463137805462, 0.0062463055364787579, 0.0048625743947923183, 0.0097774649038910866, 0.010576391592621803, 0.014344995841383934, 0.016236074268817902, 0.010144957341253757, 0.010027075186371803, 0.0046377880498766899, 0.0035445480607450008, 0.011949231848120689, 0.0056841862387955189, 0.01076069101691246, 0.0053597418591380119, 0.0073311189189553261, 0.0068490654230117798, 0.0037101404741406441, 0.0022860639728605747, 0.013379236683249474, 0.011029073968529701, 0.0085030458867549896, 0.0035325200296938419, 0.0057482221163809299, 0.0058174910955131054, 0.007581743411719799, 0.0098672444000840187, 0.023092804476618767, 0.0023604468442499638, 0.01153386477380991, 0.0075404485687613487, 0.0068739200942218304, 0.017796648666262627, 0.0061692758463323116, 0.0064844288863241673, 0.0055130887776613235, 0.0043270224705338478, 0.0055944598279893398, 0.008081742562353611, 0.0069843288511037827, 0.0048975627869367599, 0.0079704532399773598, 0.0056794816628098488, 0.0061491630040109158, 0.019254894927144051, 0.062295243144035339, 0.0031626590061932802, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 23826, 1170, 8376, -669, 5593, 6396, 17958, 7917, -1212, 18910, 6817, 1963, 7851, 43486, -257, -1919, 9695, 11438, 2389, -375, -515, 10490, 10020, 2616, 9683, 6624, 5664, 6341, -11, 212, 6590, 10017, 12841, 1703, 7545, -677, 16512, 7841, 938, 8253, 598, 14217, 16103, 3752, 4618, 11056, 16178, 4807, 5452, 2610, 233, -1131, 12336, 5450, 7690, 15359, -260, 10747, 2601, 3758, 17255, 8586, 3170, 5694, 10163, 5935, 6154, -603, 19904, 7103, 7540, -2105, -1624, 1744, 1499, 3039, 23530, 32063, 23349, -2043, 7690, -5743, -2532, 873, 9834, 7652, 7617, 5353, 10464, 3389, 8798, 4390, 13382, 20323, -8757, 15252, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00010681617277441546, 0.00022255427029449493, 0.00016574945766478777, 0.00084240600699558854, 0.00028515257872641087, 0.0001489928545197472, 0.00017259176820516586, 0.00043778365943580866, 0.00030052688089199364, 9.752284677233547e-05, 0.00020928974845446646, 0.00042043675784952939, 0.00035340987960807979, 0.00011201981396880001, 0.00038480374496430159, 0.0003571952402126044, 0.0002291671116836369, 0.00019984740356449038, 0.00020199292339384556, 0.0004286155744921416, 0.00040692530455999076, 0.00022949310368858278, 0.00014625974290538579, 0.00031091153505258262, 0.00018281627853866667, 0.0003218867932446301, 0.00026096971123479307, 0.00014397941413335502, 0.00071850128006190062, 0.00031915088766254485, 0.00021465535974130034, 0.00018597702728584409, 0.00014756522432435304, 0.00058449053904041648, 0.00022396755230147392, 0.00046630640281364322, 0.0001400268665747717, 0.00033904702286235988, 0.00049588805995881557, 0.00012473177048377693, 0.00062887475360184908, 0.0001284550380660221, 0.00013266572204884142, 0.00019620000966824591, 0.00022791138326283544, 0.00029543632990680635, 0.00017449592996854335, 0.00029188481858000159, 0.00029723288025707006, 0.00034165591932833195, 0.0004078024358022958, 0.00058642757358029485, 0.0002176294510718435, 0.00028950220439583063, 0.00030538864666596055, 0.00012281810631975532, 0.00030829251045361161, 0.00016273547953460366, 0.00028131194994784892, 0.00042061635758727789, 9.9235490779392421e-05, 0.00016622299153823406, 0.00030631868867203593, 0.00047882634680718184, 0.00010745070176199079, 0.0002033386699622497, 0.00032509563607163727, 0.00044487029663287103, 0.00013386402861215174, 0.00015683815581724048, 0.00026192949735559523, 0.00022195414931047708, 0.00025048112729564309, 0.00073466147296130657, 0.0003031884552910924, 0.00040119496406987309, 9.9609686003532261e-05, 0.00013939439668320119, 7.1267873863689601e-05, 0.00060458015650510788, 0.00014401979569811374, 0.00036575310514308512, 0.00015742839605081826, 0.0003689139848574996, 0.00016581390809733421, 0.00020563208090607077, 0.00020645573385991156, 0.0002590324729681015, 0.00015856120444368571, 0.00045221997424960136, 0.00016071603749878705, 0.0003889884683303535, 0.00015283370157703757, 0.00013710370694752783, 0.00033542243181727827, 0.00021417437528725713, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 38,7,127,80,21,-25,86,19,100,-21,-58,-56,97,120,-45,-95, 
  /* [1][0][][] */ 46,69,6,-6,64,-32,19,33,79,99,-81,127,-33,0,107,-88, 
  /* [2][0][][] */ 19,-47,-16,31,-72,12,-59,127,-66,-52,-15,87,3,-114,80,-95, 
  /* [3][0][][] */ 127,108,10,18,-91,-19,-50,-15,-1,4,86,-49,-84,82,-38,-30, 
  /* [4][0][][] */ -6,25,12,2,-10,37,-42,47,-65,-45,-6,5,6,-127,41,21, 
  /* [5][0][][] */ 95,-18,16,22,-1,-77,-19,3,-4,38,-127,-1,16,-1,15,7, 
  /* [6][0][][] */ -115,-81,-40,69,-89,-25,-5,50,-127,-87,-78,-11,23,81,11,102, 
  /* [7][0][][] */ 4,-7,-32,32,15,-127,-18,28,5,-31,-1,-18,-14,28,-21,10, 
  /* [8][0][][] */ 50,-17,-12,-6,7,7,-65,-64,-17,1,-85,27,-127,10,-8,44, 
  /* [9][0][][] */ 9,-56,17,127,6,38,2,-52,125,-76,22,-59,7,53,-54,42, 
  /* [10][0][][] */ -110,-64,11,-49,127,33,21,83,116,-72,-79,64,60,-73,-98,103, 
  /* [11][0][][] */ 51,-24,-127,8,43,28,-34,40,-28,-20,-6,-24,-20,15,-32,-2, 
  /* [12][0][][] */ 127,-99,-20,3,-20,-41,-70,-11,73,11,-104,-12,-79,16,-9,86, 
  /* [13][0][][] */ 31,-62,42,-56,127,25,-38,-112,24,-30,37,32,-45,-46,33,53, 
  /* [14][0][][] */ -53,18,-116,-62,63,-127,50,-58,29,34,-32,-107,12,96,-7,36, 
  /* [15][0][][] */ 3,0,46,36,31,-42,-20,-28,17,-55,-41,-17,-127,-46,-2,48, 
  /* [16][0][][] */ -127,55,11,30,16,106,25,25,-8,5,95,32,-3,12,0,-38, 
  /* [17][0][][] */ -2,-1,-48,-33,-24,27,34,78,-13,127,-2,21,2,68,55,2, 
  /* [18][0][][] */ -1,112,-32,-4,23,27,24,-62,35,105,-39,127,16,-42,29,-67, 
  /* [19][0][][] */ 36,-5,59,19,34,45,-6,-17,25,25,-77,-24,-127,-12,1,42, 
  /* [20][0][][] */ 74,-21,-8,-72,-63,6,37,-64,-51,33,-127,-55,31,4,72,16, 
  /* [21][0][][] */ 45,-10,127,26,-44,35,33,8,-3,11,-13,4,-40,66,-37,-15, 
  /* [22][0][][] */ 65,-14,57,68,-54,-50,37,127,13,-72,-6,51,19,84,-29,28, 
  /* [23][0][][] */ -17,3,-67,4,1,-127,1,50,-5,-30,-6,-24,-39,13,-5,36, 
  /* [24][0][][] */ 50,-61,20,-48,51,-22,-38,16,27,18,44,108,-2,70,127,43, 
  /* [25][0][][] */ -127,-68,-76,-14,-1,20,49,-47,-62,15,-75,-27,41,34,28,98, 
  /* [26][0][][] */ -17,-25,36,-19,8,26,-29,83,-89,-77,0,63,49,-127,35,-18, 
  /* [27][0][][] */ -127,34,-76,63,28,-25,8,17,55,-26,97,42,-24,10,14,-24, 
  /* [28][0][][] */ -19,-18,2,14,11,12,9,58,23,25,-5,-24,-127,-18,-3,34, 
  /* [29][0][][] */ -15,67,28,-14,36,-19,6,-30,-127,25,-33,12,0,58,-68,15, 
  /* [30][0][][] */ 11,8,-127,-34,34,-46,-27,25,-11,5,-2,-36,-39,-40,-4,29, 
  /* [31][0][][] */ 127,-21,-104,12,14,-18,-54,52,-18,4,-99,-33,6,9,-37,38, 
  /* [32][0][][] */ -127,43,32,44,37,51,13,31,35,-8,103,21,-45,33,13,-17, 
  /* [33][0][][] */ 6,-16,127,-68,-48,40,13,-53,10,26,-14,21,-6,32,37,22, 
  /* [34][0][][] */ -46,-32,-77,-127,49,-18,-28,-23,-12,-51,31,-83,4,38,94,18, 
  /* [35][0][][] */ -20,-59,78,59,38,-26,20,-16,-109,5,5,27,-21,127,-13,-40, 
  /* [36][0][][] */ -39,35,-26,-22,23,5,23,51,10,27,127,-39,-4,9,2,-6, 
  /* [37][0][][] */ -27,11,127,-40,-83,-67,25,-37,15,35,-20,10,-20,-83,58,26, 
  /* [38][0][][] */ 9,-28,-47,18,57,-34,-89,-2,-45,-16,95,-21,127,13,13,14, 
  /* [39][0][][] */ -33,8,15,-43,-101,-103,33,127,-74,-49,-5,-59,28,70,107,46, 
  /* [40][0][][] */ 23,-28,-35,-9,5,95,-32,3,23,-2,18,8,127,24,-12,-37, 
  /* [41][0][][] */ 7,10,-40,-127,51,27,-25,-63,4,-54,27,-32,-7,-13,-14,38, 
  /* [42][0][][] */ 27,48,-23,75,-115,-27,-50,34,-94,-74,98,-74,-57,127,-46,31, 
  /* [43][0][][] */ -1,78,-6,127,17,-1,42,-38,-17,67,5,26,-3,-21,40,-8, 
  /* [44][0][][] */ -3,23,-127,19,31,74,-26,42,-15,-18,27,-10,-1,-16,-57,12, 
  /* [45][0][][] */ -18,11,-65,-127,-40,-8,50,18,12,61,-42,1,22,-99,88,-94, 
  /* [46][0][][] */ 40,37,18,-19,40,24,-70,57,-15,-69,-29,57,2,127,58,23, 
  /* [47][0][][] */ 3,-15,-1,-38,-10,11,-50,39,-7,-2,18,11,5,-127,43,18, 
  /* [48][0][][] */ -10,-31,0,-127,-4,0,-11,8,46,-47,37,-31,-2,69,10,72, 
  /* [49][0][][] */ 46,-21,-20,76,92,45,9,55,-54,14,30,31,-27,26,127,1, 
  /* [50][0][][] */ -53,13,37,-30,4,127,-16,-95,64,-11,119,-5,50,-7,-9,-92, 
  /* [51][0][][] */ 8,39,17,12,22,14,-25,25,72,-2,-2,127,16,47,48,-63, 
  /* [52][0][][] */ -7,63,127,-8,42,-5,62,-49,-19,23,6,27,3,82,-101,-24, 
  /* [53][0][][] */ -4,-3,-37,-127,-53,-12,24,-9,-28,25,5,26,18,-6,75,17, 
  /* [54][0][][] */ -12,5,-46,-36,11,14,-7,6,66,13,13,-26,-7,127,7,12, 
  /* [55][0][][] */ -10,-59,-46,24,29,-85,-43,-127,25,-97,5,8,18,-96,-125,-47, 
  /* [56][0][][] */ 18,35,39,76,-8,-33,29,127,7,-42,10,-37,53,-15,-49,30, 
  /* [57][0][][] */ 127,-20,120,-26,-89,-45,-38,-43,6,35,-48,-37,23,-41,40,-12, 
  /* [58][0][][] */ 60,106,16,78,-127,-39,35,40,-38,-10,92,9,-37,-47,-39,-69, 
  /* [59][0][][] */ 87,-5,4,-3,-19,7,-36,-30,-32,-10,-127,-13,-15,-3,1,35, 
  /* [60][0][][] */ -127,49,-24,17,16,16,-12,19,12,10,98,-7,-50,-12,5,-37, 
  /* [61][0][][] */ -127,74,40,39,25,9,-49,-35,96,-114,72,21,42,24,-87,-59, 
  /* [62][0][][] */ 14,-127,-110,99,106,80,-39,120,59,-48,39,4,-117,-2,-100,-36, 
  /* [63][0][][] */ -44,-14,127,-30,-52,-37,27,-14,10,28,-13,33,-2,-39,59,31, 
  /* [64][0][][] */ 35,64,-18,7,11,2,104,-106,-37,87,-28,-32,5,-127,-31,40, 
  /* [65][0][][] */ -18,-15,24,-8,84,-10,-34,-127,6,-78,-25,-72,-24,-18,72,-8, 
  /* [66][0][][] */ -127,-11,5,8,-9,4,27,-33,-61,-33,-77,54,50,18,39,108, 
  /* [67][0][][] */ -34,-49,-47,127,27,-13,-54,40,62,37,-5,-25,-31,-41,-125,-66, 
  /* [68][0][][] */ 28,6,-50,127,-60,-37,5,-57,-68,10,30,-17,-56,-91,-21,-10, 
  /* [69][0][][] */ 73,80,34,119,63,-9,41,-103,31,127,56,59,9,-23,22,-27, 
  /* [70][0][][] */ -6,71,-42,-97,127,-69,37,25,67,-99,74,-39,-2,69,72,101, 
  /* [71][0][][] */ 32,48,20,89,49,-127,-38,93,46,-86,-9,23,14,-40,-51,32, 
  /* [72][0][][] */ -127,-79,-9,49,-16,23,-50,30,-54,-34,-83,5,60,11,-6,77, 
  /* [73][0][][] */ 31,24,6,12,14,-9,49,-13,30,11,-19,24,43,71,-127,-7, 
  /* [74][0][][] */ 27,-42,30,-26,-34,13,3,-12,-26,-46,-73,11,-127,4,62,9, 
  /* [75][0][][] */ -37,-34,-30,127,-46,-4,-7,-11,-62,42,9,-14,-10,-48,-16,-55, 
  /* [76][0][][] */ 27,-31,23,41,20,-25,-35,-121,25,-127,-32,34,-28,-25,42,-37, 
  /* [77][0][][] */ 127,-28,89,85,-55,-23,-86,-1,80,-17,-42,49,34,69,-40,10, 
  /* [78][0][][] */ -18,17,90,20,12,-21,-71,40,53,-15,-44,-39,7,127,32,-17, 
  /* [79][0][][] */ 22,10,45,16,31,45,-49,-47,15,-40,70,-22,127,-10,-44,-40, 
  /* [80][0][][] */ -123,-72,-127,116,-14,37,23,10,-115,34,-86,-46,73,-108,-36,37, 
  /* [81][0][][] */ 83,17,-76,69,127,85,-3,-33,21,-89,-26,-61,-34,25,-116,15, 
  /* [82][0][][] */ 104,106,3,45,-127,-45,-63,-15,-55,0,90,-57,-51,90,-4,-37, 
  /* [83][0][][] */ 127,30,27,-10,11,-13,-17,43,51,5,109,-41,-66,-26,-22,-99, 
  /* [84][0][][] */ -4,-28,-63,-18,43,53,-8,-127,-29,-32,72,15,6,7,18,-3, 
  /* [85][0][][] */ -69,-18,-35,-37,-43,-9,50,114,-18,116,4,-13,3,106,127,-58, 
  /* [86][0][][] */ 51,-31,25,5,-9,-47,9,-9,5,-15,-127,30,21,38,-13,34, 
  /* [87][0][][] */ -2,15,33,-35,-33,43,-28,80,-40,-83,38,13,18,-127,-9,-2, 
  /* [88][0][][] */ -17,-24,-49,-58,46,2,-3,-127,-8,-22,7,-36,9,9,51,7, 
  /* [89][0][][] */ 17,34,37,-127,31,6,-46,39,48,-83,-12,8,29,14,30,86, 
  /* [90][0][][] */ -37,30,-14,62,81,-16,93,-127,52,87,-62,44,28,14,-1,-36, 
  /* [91][0][][] */ 45,-16,-58,12,6,-127,-44,-11,1,-9,-57,-9,53,-17,8,-4, 
  /* [92][0][][] */ 3,-38,127,71,-12,16,52,45,-33,14,-47,19,16,84,-48,12, 
  /* [93][0][][] */ 127,-32,-23,-16,11,-42,8,36,-23,35,-76,-15,9,1,-7,28, 
  /* [94][0][][] */ 15,12,74,49,102,-29,10,64,-23,-12,-28,71,1,127,-16,-25, 
  /* [95][0][][] */ -117,34,24,44,-12,57,41,16,21,-9,127,8,-20,27,-30,-22, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00039728268166072667, 0.00082774879410862923, 0.00061647396069020033, 0.003133170772343874, 0.0010605714051052928, 0.00055415090173482895, 0.00064192264107987285, 0.0016282540746033192, 0.0011177532142028213, 0.00036271789576858282, 0.0007784139015711844, 0.0015637355390936136, 0.0013144416734576225, 0.00041663664160296321, 0.0014312051935121417, 0.0013285205932334065, 0.00085234397556632757, 0.00074329483322799206, 0.00075127469608560205, 0.0015941550955176353, 0.0015134821878746152, 0.0008535564411431551, 0.00054398563224822283, 0.0011563770240172744, 0.00067995081190019846, 0.0011971974745392799, 0.0009706278215162456, 0.00053550436859950423, 0.0026723304763436317, 0.0011870217276737094, 0.00079837028170004487, 0.00069170660572126508, 0.00054884114069864154, 0.0021739026997238398, 0.0008330052369274199, 0.0017343390500172973, 0.00052080361638218164, 0.0012610217090696096, 0.0018443623557686806, 0.00046391636715270579, 0.0023389814887195826, 0.00047776437713764608, 0.00049342523561790586, 0.00072972907219082117, 0.00084767356747761369, 0.0010988198919221759, 0.00064900482539087534, 0.0010856107110157609, 0.0011055017821490765, 0.0012707249261438847, 0.0015167444944381714, 0.0021811071783304214, 0.00080943183274939656, 0.0010767490603029728, 0.0011358356568962336, 0.00045679885079152882, 0.0011466360883787274, 0.00060526403831318021, 0.0010462868958711624, 0.0015644035302102566, 0.00036908776382915676, 0.00061823514988645911, 0.0011392948217689991, 0.0017809045966714621, 0.00039964268216863275, 0.00075627997284755111, 0.0012091321405023336, 0.0016546114347875118, 0.00049788207979872823, 0.00058333005290478468, 0.00097419752273708582, 0.00082551676314324141, 0.00093161745462566614, 0.0027324352413415909, 0.0011276524746790528, 0.0014921692200005054, 0.00037047950900159776, 0.00051845127018168569, 0.00026506747235544026, 0.0022486222442239523, 0.00053565454436466098, 0.0013603499392047524, 0.0005855253548361361, 0.0013721062568947673, 0.00061671365983784199, 0.00076480989810079336, 0.00076787330908700824, 0.00096342258621007204, 0.00058973859995603561, 0.001681947149336338, 0.00059775309637188911, 0.0014467694563791156, 0.00056843622587621212, 0.00050993147306144238, 0.0012475406983867288, 0.00079658132744953036, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -35101, 5476, 4026, -10098, -1014, -5396, -8896, -38666, -735, 24193, 32001, -7275, -3762, -23439, 36027, -36717, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00071518769254907966, 0.00071779527934268117, 0.00085052673239260912, 0.00089556368766352534, 0.00075174757512286305, 0.00079579459270462394, 0.0011926050065085292, 0.00069633714156225324, 0.00051729159895330667, 0.00056247325846925378, 0.00074271199991926551, 0.0006748720770701766, 0.00078941218089312315, 0.00102755066473037, 0.00049396348185837269, 0.00052039005095139146, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -25,5,-25,11,13,15,-3,105,-48,13,48,-6,14,-7,-19,13,5,-6,-9,3,53,0,13,113,-15,86,-8,-13,26,-20,16,-24,-26,54,12,-45,11,44,22,-4,-104,-33,19,44,42,20,-127,-43, 
  /* [1][0][][] */ -31,-16,23,12,-39,12,-5,46,-54,-39,12,-55,-27,-11,4,-3,-22,107,-11,21,7,10,-19,-19,20,-47,19,24,-30,-87,-50,31,-16,-9,33,-7,-3,-37,7,28,-19,-32,127,14,5,8,30,-5, 
  /* [2][0][][] */ -22,-7,-10,-30,0,-62,14,-22,1,10,15,21,18,28,-20,13,1,-20,-8,-13,-9,0,-3,-127,-8,70,-9,6,-4,-18,1,1,-8,53,6,-7,17,18,22,2,-38,2,-24,-4,-3,-3,13,14, 
  /* [3][0][][] */ -6,38,0,-31,-3,-1,3,-8,-18,1,8,38,-127,15,-1,-4,3,0,-14,-6,-28,5,8,15,-6,-10,0,24,-5,23,5,25,2,2,17,18,-8,29,43,8,6,9,21,-29,5,2,7,15, 
  /* [4][0][][] */ 46,-41,7,24,23,26,31,-27,-36,1,-25,-23,2,12,9,18,24,2,-80,4,-8,17,22,86,0,-26,-2,47,9,-77,25,6,13,-28,32,-127,8,43,0,31,-8,17,16,-22,-11,-24,-7,8, 
  /* [5][0][][] */ 49,-8,-18,75,6,-9,9,17,4,-11,30,6,9,49,18,5,-16,29,42,5,27,8,2,-16,2,-63,14,-24,0,-12,8,12,69,-127,3,33,-21,-8,6,7,-81,53,27,4,-1,-3,-110,-3, 
  /* [6][0][][] */ 21,2,7,2,-18,-7,4,-14,-3,6,0,4,-11,3,-1,9,5,-11,127,10,-3,13,7,-35,5,1,21,-15,-16,-4,-7,7,4,-14,28,-34,3,-38,64,14,-3,-6,-13,3,-15,2,11,-9, 
  /* [7][0][][] */ -42,-16,-8,22,-17,84,-4,39,-12,33,5,127,76,8,0,1,-7,-35,-14,-31,-19,-6,-13,59,-2,-44,-46,-26,-16,-11,-18,-21,14,-2,-21,-2,14,-58,94,-3,15,32,-67,-58,11,-4,11,-4, 
  /* [8][0][][] */ -42,-45,6,10,-11,-4,-1,27,-7,-67,1,56,48,9,11,6,-24,64,-24,3,-31,22,-4,-6,6,3,7,50,-10,127,-8,22,-9,10,-18,-127,-111,69,27,32,18,-1,113,-17,15,28,16,15, 
  /* [9][0][][] */ -17,6,11,49,20,-35,-5,-13,63,-48,6,66,-53,7,44,-2,-1,39,-29,-14,71,15,-20,-8,-11,1,53,-33,7,19,15,9,4,25,78,-105,-15,-127,-111,11,-11,29,70,17,8,5,-21,-39, 
  /* [10][0][][] */ -16,-8,-17,-108,42,81,13,-15,0,31,4,12,49,-73,-28,16,51,-29,57,-31,38,-24,38,57,-38,-127,5,-31,49,29,42,-55,-33,-67,18,3,8,-31,12,-29,-22,-61,-17,17,7,18,25,-33, 
  /* [11][0][][] */ -4,42,-12,70,31,-60,-80,-20,10,60,-11,5,-9,66,-15,-67,24,45,10,-13,-57,-110,-3,-2,2,-36,22,-14,51,-36,27,-83,58,-14,-41,-108,81,20,8,-127,-4,63,100,-75,-3,-48,31,29, 
  /* [12][0][][] */ 114,12,-13,20,-9,21,3,103,16,-12,-59,-24,-10,11,-11,-11,-7,11,0,-2,-1,-2,-6,17,-3,9,5,10,-13,13,-4,-3,2,-67,-13,16,-22,-10,-13,-4,-12,-86,6,-127,-51,-19,84,-6, 
  /* [13][0][][] */ 5,1,-1,5,9,-5,4,-2,2,18,14,24,-6,9,8,-4,5,3,11,1,11,-13,8,-9,-2,-2,6,127,11,-1,7,-5,6,-4,-45,28,11,-1,11,-21,-18,-3,0,6,-7,0,-3,-13, 
  /* [14][0][][] */ 46,-48,47,-70,58,39,26,-91,-42,-48,-1,121,-68,5,63,17,47,26,-71,56,12,20,62,-27,14,59,-25,-115,26,-42,52,32,3,66,-127,-48,-33,35,103,8,-47,8,53,-7,-1,-9,18,-14, 
  /* [15][0][][] */ -8,-53,-88,-43,53,24,101,-38,-8,8,-27,-38,81,13,-118,63,54,42,70,-81,-122,-18,71,-15,-97,40,10,54,48,50,45,-52,27,65,103,127,-26,-111,-19,-33,99,51,117,-46,-7,-30,-25,64, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.030395476147532463, 0.030506297945976257, 0.036147385835647583, 0.038061454892158508, 0.031949270516633987, 0.033821269869804382, 0.050685711205005646, 0.029594328254461288, 0.021984891965985298, 0.023905113339424133, 0.031565260142087936, 0.028682062402367592, 0.033550016582012177, 0.043670900166034698, 0.020993448793888092, 0.022116577252745628, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 1990, 42590, -1123, 40014, 5348, 118292, -2802, 48039, 1734, 33413, 27790, 873, -3279, 34020, -1750, -2152, -988, -154, -64, -3096, -1160, -2148, -2083, -17546, -4957, 36447, 127411, 109661, 4262, 7404, -3007, 1287, 28464, -1604, 59105, -9399, 72657, 316, 45220, 1163, -109, 63545, -639, 1289, 58310, -2524, 51, 52021, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.889959670137614e-05, 3.8311780372168869e-05, 0.00015008125046733767, 5.5371478083543479e-05, 0.00010691578063415363, 7.5426309194881469e-05, 0.00015300069935619831, 0.00012707563291769475, 7.7922792115714401e-05, 4.170227111899294e-05, 4.8293153668055311e-05, 8.9414461399428546e-05, 4.4987558794673532e-05, 3.8394853618228808e-05, 0.00016624519776087254, 0.0001554232876515016, 0.00017973814101424068, 8.9896064309868962e-05, 0.00014989514602348208, 0.00013409573875833303, 9.8897005955222994e-05, 0.00022070038539823145, 9.5231254817917943e-05, 0.00011797805200330913, 9.8737866210285574e-05, 0.00012382121349219233, 2.3303800844587386e-05, 5.9064277593279257e-05, 0.00010855036816792563, 7.6650307164527476e-05, 0.00012055482511641458, 0.00015932126552797854, 5.3838750318391249e-05, 0.00015283703396562487, 2.4499748178641312e-05, 6.631712312810123e-05, 7.9955141700338572e-05, 9.3882255896460265e-05, 0.0001316546113230288, 9.7891897894442081e-05, 0.00011263783380854875, 9.5175841124728322e-05, 9.2298243544064462e-05, 0.00010237773676635697, 2.8489643227658235e-05, 0.00013201456749811769, 0.00010587822180241346, 2.5656700017862022e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 72,-99,97,70,53,-35,108,-66,60,-93,-81,50,55,-46,-73,-90,104,77,49,77,67,-75,-82,51,-34,-39,-69,-68,-67,61,-63,-112,-15,43,74,66,-59,54,-50,-25,50,-72,57,66,-91,13,75,-32, 85,-99,127,88,-77,-67,-57,-86,93,-104,-66,77,80,-113,-94,91,-36,93,82,127,85,-116,55,73,-52,-76,-71,-84,56,76,-30,-127,-84,80,85,83,-78,86,-84,-16,75,-92,79,89,-72,-127,91,-106, 37,-52,69,39,19,-39,-47,-39,43,-32,3,38,31,-83,-52,0,-54,36,35,69,35,-56,31,26,-28,-46,-48,-25,33,32,83,-90,-87,43,39,34,-27,40,-39,-10,41,-40,32,44,-4,-8,38,-74, 
  /* [0][1][][] */ 95,-116,-42,95,55,-82,127,-92,87,-112,-72,81,85,-112,-11,-127,127,112,74,-35,86,109,-127,73,72,-73,-96,-98,-127,89,-67,-8,-87,69,110,94,-85,78,-82,87,83,-99,86,91,-93,110,93,-92, 127,-127,-63,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-22,95,-65,127,127,-47,127,127,71,127,127,-127,-127,-127,52,127,-27,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 64,-88,-31,66,38,-60,-49,-64,56,-47,-66,59,50,-53,-16,12,-62,53,58,-26,58,64,52,65,66,-65,-64,-48,37,54,127,16,-58,69,49,49,-46,59,-58,58,59,-57,55,63,-64,-66,60,-58, 
  /* [0][2][][] */ 46,-53,-49,50,24,-52,64,-44,43,-74,-7,44,57,-78,85,-81,77,55,36,-31,30,-13,-78,30,-22,-49,-50,-49,-76,33,-40,87,-75,37,52,45,-28,37,-43,-86,47,-50,39,45,-20,17,40,-76, 73,-74,-49,83,-59,-63,-73,-69,50,-76,-67,66,74,-53,127,31,-46,60,62,-43,55,-20,42,64,-44,-70,-75,-61,30,62,-24,113,-55,65,60,58,-49,62,-68,-104,67,-66,59,60,-86,52,66,-53, 41,-45,-29,49,27,-18,-18,-34,16,-26,-53,31,32,3,68,25,-35,23,31,-30,30,-1,40,40,-22,-33,-50,-25,35,33,60,67,-3,35,18,22,-20,30,-31,-53,28,-31,27,29,-66,11,34,-7, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0033532327506691217, 0.0016282506985589862, 0.0063784527592360973, 0.0023532877676188946, 0.0045439205132424831, 0.0032056181225925684, 0.0065025296062231064, 0.0054007144644856453, 0.0033117185812443495, 0.0017723464407026768, 0.0020524589344859123, 0.0038001143839210272, 0.0019119712524116039, 0.0016317812260240316, 0.0070654209703207016, 0.0066054896451532841, 0.0076388707384467125, 0.0038205827586352825, 0.0063705435022711754, 0.0056990687735378742, 0.0042031225748360157, 0.0093797659501433372, 0.0040473281405866146, 0.0050140670500695705, 0.0041963593102991581, 0.005262401420623064, 0.00099041149951517582, 0.0025102316867560148, 0.0046133906580507755, 0.0032576378434896469, 0.0051235798746347427, 0.0067711537703871727, 0.0022881468757987022, 0.0064955735579133034, 0.0010412392439320683, 0.0028184775728732347, 0.0033980933949351311, 0.0039899959228932858, 0.0055953208357095718, 0.0041604056023061275, 0.0047871079295873642, 0.0040449732914566994, 0.0039226752705872059, 0.0043510538525879383, 0.0012108098017051816, 0.005610619205981493, 0.0044998242519795895, 0.0010904096998274326, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 741, 773, 1892, 360, 11280, 17446, 3151, -26, -791, -638, 1083, 1110, 3273, 1093, 18029, 3956, 2180, -1415, -364, 3282, -1870, 11719, 10746, 9475, 6147, 208, 3849, 4418, 7635, -395, 10245, 6400, 628, -6, 5243, 4277, -2210, 260, -757, 6162, 1599, -329, -971, -116, 1224, 4761, 940, 1036, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00036401997203938663, 0.00095957377925515175, 0.00027172971749678254, 0.00029440264916047454, 0.00019061678904108703, 0.00022825304768048227, 0.00036128549254499376, 0.00022246208391152322, 0.00031157926423475146, 0.0006846314063295722, 0.00098732102196663618, 0.00025893666315823793, 0.0004056603938806802, 0.00075873389141634107, 0.00019380968296900392, 0.00032248615752905607, 0.00024661916540935636, 0.00031789994682185352, 0.00021084999025333673, 0.00028436095453798771, 0.00034546718234196305, 0.0002223709161626175, 0.00034275618963874876, 0.00016159268852788955, 0.00026770916883833706, 0.00030371954198926687, 0.0018048897618427873, 0.0004013229045085609, 0.0002260010369354859, 0.00043105287477374077, 0.00025294211809523404, 0.00019343708117958158, 0.00068830460077151656, 0.00022477362654171884, 0.00069286196958273649, 0.00043755848309956491, 0.00062731921207159758, 0.00034389542997814715, 0.000200358044821769, 0.00030614406568929553, 0.00015099660959094763, 0.00022974144667387009, 0.00037091944250278175, 0.00025312660727649927, 0.0016407800139859319, 0.00028236166690476239, 0.0003039776929654181, 0.001134914462454617, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,5,6,65,-44,45,28,-37, 
  /* [1][0][][] */ 22,55,34,9,0,-49,81,127, 
  /* [2][0][][] */ -50,-30,-17,0,-127,-7,16,8, 
  /* [3][0][][] */ 109,-6,-15,-127,-117,33,41,-16, 
  /* [4][0][][] */ -127,38,-15,12,119,-20,66,42, 
  /* [5][0][][] */ -97,-28,28,-8,-127,8,11,103, 
  /* [6][0][][] */ -6,-127,17,-32,15,-2,18,42, 
  /* [7][0][][] */ -81,-15,4,118,127,-31,-32,9, 
  /* [8][0][][] */ 81,9,5,-127,1,-28,-54,-52, 
  /* [9][0][][] */ -12,-127,4,-14,13,99,-74,64, 
  /* [10][0][][] */ -63,-6,-21,11,-127,63,61,-14, 
  /* [11][0][][] */ 114,15,47,22,-48,-52,-37,-127, 
  /* [12][0][][] */ 3,16,39,-12,6,-73,127,61, 
  /* [13][0][][] */ 60,2,-1,-7,127,86,92,-54, 
  /* [14][0][][] */ 127,41,4,29,-57,5,-7,-9, 
  /* [15][0][][] */ -13,-127,3,-7,-1,-11,19,48, 
  /* [16][0][][] */ -61,-15,12,0,-127,0,17,6, 
  /* [17][0][][] */ -11,96,-105,16,-24,-120,127,-79, 
  /* [18][0][][] */ 127,-34,-36,8,-70,30,17,120, 
  /* [19][0][][] */ 127,-54,-32,-26,45,-15,16,-17, 
  /* [20][0][][] */ 127,10,-36,96,-3,32,17,-55, 
  /* [21][0][][] */ 16,57,-46,15,-10,51,-127,-79, 
  /* [22][0][][] */ -127,33,43,-21,-68,-4,-72,-32, 
  /* [23][0][][] */ -39,-52,-1,22,-127,57,72,-32, 
  /* [24][0][][] */ 127,-8,-3,25,-91,-22,16,18, 
  /* [25][0][][] */ 23,-11,-12,-13,127,49,45,-39, 
  /* [26][0][][] */ 11,-80,-6,-38,-15,-127,83,-34, 
  /* [27][0][][] */ -19,-127,31,-14,-9,-51,38,0, 
  /* [28][0][][] */ -61,41,-12,17,8,1,127,78, 
  /* [29][0][][] */ 4,41,8,11,-7,38,-88,-127, 
  /* [30][0][][] */ 107,5,20,21,-127,-33,-42,-26, 
  /* [31][0][][] */ 0,-42,65,1,-5,-91,127,89, 
  /* [32][0][][] */ -54,24,-11,3,-127,-98,-102,43, 
  /* [33][0][][] */ -27,17,-1,24,-127,-82,-68,23, 
  /* [34][0][][] */ 0,-127,51,-4,-18,95,-60,65, 
  /* [35][0][][] */ -21,-46,-127,-15,3,-67,36,-49, 
  /* [36][0][][] */ 15,127,57,16,-11,31,-20,-50, 
  /* [37][0][][] */ -127,36,39,-15,41,-30,-15,-99, 
  /* [38][0][][] */ -127,-10,-65,-15,31,24,53,117, 
  /* [39][0][][] */ -10,-49,61,6,8,-86,127,106, 
  /* [40][0][][] */ -43,-14,-3,-22,-127,104,100,-29, 
  /* [41][0][][] */ -127,56,-2,-91,-105,-120,-108,31, 
  /* [42][0][][] */ -39,-127,-87,-2,-12,68,-92,-68, 
  /* [43][0][][] */ -76,-2,-25,-127,89,59,68,4, 
  /* [44][0][][] */ 127,11,13,-112,43,-31,-31,35, 
  /* [45][0][][] */ -31,-127,-32,-12,-7,-75,95,32, 
  /* [46][0][][] */ 103,-3,-10,-24,127,-36,-34,6, 
  /* [47][0][][] */ 127,7,-3,102,0,13,10,-55, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00068488850956782699, 0.0018053982639685273, 0.00051124818855896592, 0.00055390637135133147, 0.00035863759694620967, 0.00042944864253513515, 0.00067974365083500743, 0.00041855318704620004, 0.00058622343931347132, 0.0012881056172773242, 0.001857603550888598, 0.00048717862227931619, 0.00076323322718963027, 0.0014275263529270887, 0.00036464488948695362, 0.0006067443173378706, 0.0004640037368517369, 0.00059811555547639728, 0.00039670552359893918, 0.00053501332877203822, 0.00064998219022527337, 0.00041838164906948805, 0.00064488156931474805, 0.00030402993434108794, 0.00050368369556963444, 0.00057143572485074401, 0.0033958251588046551, 0.00075507239671424031, 0.00042521159048192203, 0.00081100809620693326, 0.00047590013127774, 0.00036394383641891181, 0.0012950166128575802, 0.00042290225974284112, 0.0013035910669714212, 0.00082324811955913901, 0.001180275110527873, 0.00064702500822022557, 0.00037696535582654178, 0.00057599734282121062, 0.00028409386868588626, 0.00043224901310168207, 0.00069786957465112209, 0.00047624719445593655, 0.0030870595946907997, 0.00053125177510082722, 0.00057192140957340598, 0.0021352944895625114, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -35245, 24797, -16095, -21424, 13702, -1724, 34634, 48275, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00047071243170648813, 0.00073620810871943831, 0.0015354409115388989, 0.0016806820640340447, 0.00085390458116307855, 0.00051065318984910846, 0.00062853138661012053, 0.00086417066631838679, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -61,-18,-32,9,4,-17,5,14,-85,115,-37,102,127,-3,75,-27,-4,-41,21,-8,12,-3,-32,-27,16,-89,6,41,-2,9,25,-39,8,-76,122,7,-23,4,-7,-12,96,2,41,-28,-42,15,-22,-24, 
  /* [1][0][][] */ 2,33,127,-7,-15,-41,-2,-63,23,2,13,6,-19,-3,-6,-126,2,-71,15,-11,-39,19,21,-24,-29,-12,14,-3,12,-14,21,-17,-3,3,7,9,-25,-23,72,-38,4,57,-6,17,-24,9,33,-9, 
  /* [2][0][][] */ 9,-48,23,-41,32,30,-5,-34,9,-2,1,9,-3,60,15,-6,-39,127,-25,-28,-10,28,-45,-1,121,-2,0,-10,-29,-18,4,-40,-11,-8,10,20,-5,5,-13,7,16,-17,-14,6,3,27,-25,-35, 
  /* [3][0][][] */ -4,-89,8,2,-1,-15,1,-5,-19,-5,29,22,20,-22,51,6,-4,-17,13,21,-10,23,-20,-5,0,55,-1,16,0,0,127,-2,2,9,8,5,-14,-4,-5,17,-6,1,-13,33,-6,-1,9,37, 
  /* [4][0][][] */ -122,13,12,12,-3,-27,9,-2,37,-29,31,-19,-38,1,-13,-4,16,8,1,34,20,-14,8,2,-10,45,-2,113,3,-6,-3,-26,5,-127,-20,19,3,2,0,-2,-43,-17,-14,19,-49,1,5,13, 
  /* [5][0][][] */ -16,38,36,11,-49,24,-10,24,28,-7,21,5,11,-53,-1,36,-3,-83,41,19,64,-53,21,49,5,17,-92,-48,-44,-35,30,-15,-18,-91,-7,-55,88,17,-42,28,26,-43,-15,7,127,0,-32,14, 
  /* [6][0][][] */ -37,-31,-7,0,47,-23,1,-32,-2,-8,41,-24,-8,46,3,-58,-3,13,-12,-23,-33,59,-4,-85,7,-11,-67,-71,16,31,-24,7,-6,-60,-15,71,-60,-54,-10,-69,3,-8,15,50,127,-29,30,18, 
  /* [7][0][][] */ 17,36,-85,37,-19,23,2,67,-11,-12,69,-46,0,-29,-18,-4,-24,-127,28,-38,55,44,18,-57,30,-8,20,11,-19,29,-20,10,-3,41,-6,-28,-5,-61,-23,-72,-12,-25,28,72,-26,-24,-16,-3, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020005278289318085, 0.031288843601942062, 0.065256237983703613, 0.071428984403610229, 0.036290943622589111, 0.021702760830521584, 0.026712583377957344, 0.036727253347635269, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -51798, -351, 8805, -12, 5919, -3979, 2143, 32230, 1340, 37967, -1554, 27114, -6063, -870, 28370, 14123, 142, 20596, 40898, 10856, 97, -454, 299, 19508, -8309, 31770, 45112, 35362, 4118, 2484, -1724, 557, 2222, 18517, -6547, 18041, -11540, 18761, -23047, 136011, 42329, 21449, 14208, -1301, 16073, 4120, 2198, 410, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031554652377963066, 0.00023435297771357, 0.00018544484919402748, 0.00020031564054079354, 0.00010457580356160179, 9.4935028755571693e-05, 0.00048716060700826347, 0.00010692507930798456, 9.3180242402013391e-05, 0.00012943556066602468, 7.5251409725751728e-05, 0.00015980888565536588, 0.00025327561888843775, 0.00021526568161789328, 9.0762441686820239e-05, 0.00011261299368925393, 0.0001783931948011741, 0.00018829833425115794, 5.8845249441219494e-05, 0.0001499030040577054, 0.00022719005937688053, 0.0002097501273965463, 0.00013256511010695249, 0.00010854590072995052, 0.00017677049618214369, 0.00011474610801087692, 0.00055791577324271202, 9.1547495685517788e-05, 0.00012996647274121642, 0.0003329658939037472, 0.00011386557162040845, 0.00017023479449562728, 0.00039540397119708359, 0.00015782633272465318, 0.00017308209498878568, 0.00013798299187328666, 0.00029902471578679979, 0.00013403969933278859, 0.0002918638929259032, 1.9238948880229145e-05, 7.561150414403528e-05, 5.0742935854941607e-05, 0.0001133244950324297, 0.00012803927529603243, 0.00014015595661476254, 8.4278093709144741e-05, 0.00017684622434899211, 8.5014558862894773e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 3,-3,20,109,5,79,0,28,15,8,9,9,-10,-8,-43,8,-1,8,-22,-110,-8,-21,127,-7,-3,5,-5,8,-4,3,16,101,21,28,39,-26,1,34,0,5,18,-66,-8,-10,19,2,-8,-10, 127,10,15,-127,30,85,12,11,122,127,5,44,-53,-24,6,7,127,-56,-57,-53,-102,26,-110,15,17,69,-31,-84,24,20,11,-122,6,-62,127,11,-40,-47,-5,118,-78,-98,-29,3,-32,-9,-127,21, -32,-3,7,15,2,63,6,17,27,9,-17,32,-17,-4,18,2,-104,28,1,77,-31,-11,-18,-6,-5,-62,-3,30,-16,4,5,-22,8,-24,16,-18,-1,47,42,-13,50,37,-15,12,-39,2,-3,-7, 
  /* [0][1][][] */ 126,7,1,-99,14,-27,36,-16,8,9,-14,55,-6,0,19,-33,1,-49,-59,-84,9,-72,-125,-16,4,99,-15,-127,-8,30,11,-106,17,-54,-3,127,-2,58,-40,42,-61,-127,39,-91,-43,-16,-14,-6, 28,-127,-127,115,-127,-127,-127,-127,-127,-96,127,-127,127,127,36,-127,-83,127,127,-104,127,127,111,127,127,-127,-127,28,-127,-127,94,127,-127,127,-30,-41,127,-127,127,127,127,-81,127,127,127,-125,99,105, 57,4,48,-13,6,-62,45,18,-25,14,-110,-7,0,-39,127,3,62,-66,-68,82,14,-44,10,-32,1,5,-38,69,21,39,2,3,32,-45,8,66,-5,65,69,-9,-80,6,-83,-31,28,-18,-13,4, 
  /* [0][2][][] */ -56,-8,25,-18,7,34,-36,22,6,-24,12,33,6,-6,-37,17,5,22,-15,104,6,-32,-15,-11,-3,22,0,52,-8,2,45,-30,-19,-44,-34,-39,-1,31,9,-22,10,-8,40,-39,-35,17,-12,18, 68,126,75,20,15,-19,126,35,16,-3,42,27,-7,0,-89,24,-59,-56,-36,119,-37,49,12,20,33,-64,-40,32,78,0,127,21,84,-27,5,-36,-26,-17,-13,120,-26,-15,-40,44,21,-33,7,-127, -43,-5,6,-4,5,-5,-61,7,-21,-10,-44,-40,19,-8,-8,10,32,23,-8,-127,23,-9,5,-9,-7,10,-11,-52,-14,8,6,7,-20,88,-39,-22,-5,37,25,-61,5,4,-36,6,-41,127,-6,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013410727493464947, 0.0099600013345479965, 0.0078814057633280754, 0.0085134143009781837, 0.0044444715604186058, 0.0040347385220229626, 0.020704325288534164, 0.0045443158596754074, 0.0039601600728929043, 0.00550101138651371, 0.003198184771463275, 0.0067918775603175163, 0.010764214210212231, 0.0091487914323806763, 0.0038574037607759237, 0.0047860522754490376, 0.0075817103497684002, 0.0080026788637042046, 0.0025009231176227331, 0.0063708778470754623, 0.0096555771306157112, 0.0089143803343176842, 0.0056340168230235577, 0.004613200668245554, 0.007512745913118124, 0.0048767095431685448, 0.023711418733000755, 0.0038907686248421669, 0.0055235750041902065, 0.014151050709187984, 0.0048392866738140583, 0.0072349784895777702, 0.016804669052362442, 0.0067076189443469048, 0.0073559889569878578, 0.0058642770163714886, 0.012708550319075584, 0.0056966869160532951, 0.012404214590787888, 0.00081765529466792941, 0.0032134887296706438, 0.0021565747447311878, 0.0048162909224629402, 0.005441669374704361, 0.005956627894192934, 0.0035818188916891813, 0.0075159640982747078, 0.0036131185479462147, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 67188, 8212, 5919, 7646, 1610, 10534, -2261, -309, 989, 2788, 3990, 512, 2067, -847, 693, -2303, 4803, 11575, -274, 26543, 7367, 3027, 9209, -550, 3674, 5792, 27732, 11496, -101, -2534, 155, 2149, -1889, 11186, 3110, 7371, 7166, 3838, 25187, 1963, -993, 2764, 1230, 3956, 6300, 2531, -1759, 2960, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 6.3684135966468602e-05, 0.00027511856751516461, 0.0002704584039747715, 0.0004177959926892072, 0.0013545566471293569, 0.00047434959560632706, 0.00082342076348140836, 0.0010786015773192048, 0.00056181225227192044, 0.0004949489957652986, 0.00059264234732836485, 0.00036510737845674157, 0.00048552430234849453, 0.00053802982438355684, 0.00054850336164236069, 0.0015918043209239841, 0.00034135469468310475, 0.00036526119220070541, 0.001930366619490087, 0.00010110802395502105, 0.00018326970166526735, 0.00033681874629110098, 0.00043984281364828348, 0.0009243660606443882, 0.00033891599741764367, 0.00020177700207568705, 0.00014397455379366875, 0.00031992275035008788, 0.00093606044538319111, 0.0010083282832056284, 0.00049564667278900743, 0.00037847011117264628, 0.0010418908204883337, 0.00019369498477317393, 0.00033890601480379701, 0.00025348170311190188, 0.00051411375170573592, 0.00035364789073355496, 9.4081013230606914e-05, 0.0023190269712358713, 0.00063243421027436852, 0.00097855634521692991, 0.00038597194361500442, 0.00038900438812561333, 0.00020051139290444553, 0.00042505640885792673, 0.00063706777291372418, 0.00091404386330395937, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 126,55,9,-15,127,16,-46,-40, 
  /* [1][0][][] */ -10,26,23,127,2,-6,6,11, 
  /* [2][0][][] */ 45,-127,-4,42,8,-72,74,-35, 
  /* [3][0][][] */ 127,-39,-24,4,15,-47,33,5, 
  /* [4][0][][] */ 29,-82,127,-12,-21,-77,49,-93, 
  /* [5][0][][] */ 61,-12,4,4,127,29,-6,5, 
  /* [6][0][][] */ 4,101,2,127,7,57,-99,-62, 
  /* [7][0][][] */ -4,127,-3,4,-6,-12,20,7, 
  /* [8][0][][] */ 127,41,-7,-6,-70,-26,14,-25, 
  /* [9][0][][] */ -127,25,21,28,71,21,-5,-13, 
  /* [10][0][][] */ -62,9,17,127,57,58,-8,-19, 
  /* [11][0][][] */ -127,4,30,-86,76,16,-29,-95, 
  /* [12][0][][] */ 127,15,13,14,-31,-6,-6,-55, 
  /* [13][0][][] */ -31,96,-127,-9,20,121,-84,60, 
  /* [14][0][][] */ -37,-14,4,127,40,-3,19,-38, 
  /* [15][0][][] */ -5,127,0,-4,-1,-13,11,-56, 
  /* [16][0][][] */ -26,-127,-10,8,7,-103,101,-30, 
  /* [17][0][][] */ 28,127,3,-15,-8,84,-83,-4, 
  /* [18][0][][] */ -6,40,-127,-7,6,36,-26,56, 
  /* [19][0][][] */ -55,3,-5,3,-127,6,27,51, 
  /* [20][0][][] */ -127,-21,-36,8,89,-88,47,-7, 
  /* [21][0][][] */ -56,-6,-4,-4,-127,17,-1,0, 
  /* [22][0][][] */ -95,-37,-13,4,127,-26,35,55, 
  /* [23][0][][] */ -12,-14,7,-8,3,83,-127,-115, 
  /* [24][0][][] */ -9,39,-127,7,7,55,-14,76, 
  /* [25][0][][] */ 103,-21,-14,127,-86,-23,-11,-63, 
  /* [26][0][][] */ -5,-27,-6,3,-15,114,127,-22, 
  /* [27][0][][] */ 103,-18,-13,-2,127,44,38,-39, 
  /* [28][0][][] */ 10,107,-87,5,-3,67,-12,127, 
  /* [29][0][][] */ -12,15,-19,-15,10,104,-127,-90, 
  /* [30][0][][] */ 5,-10,8,-127,-4,-2,-1,-20, 
  /* [31][0][][] */ -64,20,10,17,-127,15,-2,-13, 
  /* [32][0][][] */ 5,2,-2,-127,0,51,-63,-89, 
  /* [33][0][][] */ -92,-12,16,2,-127,46,42,16, 
  /* [34][0][][] */ -127,43,24,19,57,-9,20,8, 
  /* [35][0][][] */ -51,127,13,8,-4,-94,50,-7, 
  /* [36][0][][] */ 9,42,15,-23,12,92,-127,-32, 
  /* [37][0][][] */ 67,-82,21,27,71,-127,113,-65, 
  /* [38][0][][] */ 45,-127,44,24,30,32,-71,55, 
  /* [39][0][][] */ -2,-127,-2,-9,-6,-13,-49,-93, 
  /* [40][0][][] */ 101,7,-2,14,-107,93,-127,-59, 
  /* [41][0][][] */ -11,-111,5,2,-17,74,-36,127, 
  /* [42][0][][] */ 44,-22,-13,-127,-57,-25,11,-14, 
  /* [43][0][][] */ -71,-25,18,-127,49,19,-9,-2, 
  /* [44][0][][] */ 8,13,-15,31,-16,104,127,-22, 
  /* [45][0][][] */ -127,-37,10,8,44,5,34,-62, 
  /* [46][0][][] */ 24,95,127,-5,-6,47,6,-7, 
  /* [47][0][][] */ 8,6,-5,127,8,6,16,-8, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00016806810162961483, 0.00072606239700689912, 0.00071376381674781442, 0.0011026008287444711, 0.003574795788154006, 0.0012518508592620492, 0.0021730808075517416, 0.0028465257491916418, 0.0014826726401224732, 0.0013062144862487912, 0.0015640360070392489, 0.00096355087589472532, 0.0012813418870791793, 0.0014199087163433433, 0.0014475493226200342, 0.0042009134776890278, 0.00090086547425016761, 0.00096395681612193584, 0.005094409454613924, 0.00026683308533392847, 0.00048366506234742701, 0.00088889466132968664, 0.0011607843916863203, 0.002439484465867281, 0.00089442951139062643, 0.00053250748896971345, 0.00037996168248355389, 0.00084430462447926402, 0.0024703468661755323, 0.0026610682252794504, 0.001308055710978806, 0.00099881633650511503, 0.0027496425900608301, 0.00051117833936586976, 0.00089440314332023263, 0.00066896079806610942, 0.0013567919377237558, 0.00093330827075988054, 0.00024828818277455866, 0.0061201187781989574, 0.0016690501943230629, 0.0025824974291026592, 0.0010186143917962909, 0.0010266172466799617, 0.00052916741697117686, 0.0011217617429792881, 0.001681278576143086, 0.0024122432805597782, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -7749, -25958, 25429, 24488, 988, 2821, 36776, 5133, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0012609922559931874, 0.00064175133593380451, 0.0012669151183217764, 0.0012193607399240136, 0.0010218179086223245, 0.0011566185858100653, 0.00080049410462379456, 0.00081016088370233774, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -9,4,16,-85,9,21,10,5,0,5,2,0,89,0,6,6,0,-9,-5,1,69,1,2,5,25,39,11,21,-4,5,-1,-127,7,6,2,1,-26,-4,-6,32,5,-30,-5,7,4,-7,9,2, 
  /* [1][0][][] */ -37,-3,-6,-7,43,17,-32,81,21,9,-28,-32,11,0,13,34,0,43,14,-56,0,22,127,24,-29,13,54,9,15,-11,13,-16,19,-7,-13,-29,8,-66,12,4,3,-12,-81,-5,-29,7,-54,-89, 
  /* [2][0][][] */ -65,16,-6,7,45,-4,31,20,-10,58,25,-2,8,0,5,61,0,12,-127,24,4,10,6,-17,-22,2,41,0,5,38,23,5,11,-13,-9,-9,15,8,2,-3,40,3,-34,8,24,-67,33,16, 
  /* [3][0][][] */ 0,-10,-1,8,-9,29,3,5,62,14,-2,-6,28,0,-30,-2,0,3,-10,1,-3,-1,7,-13,-13,-9,-5,-5,4,-1,2,-5,-53,34,-54,-5,12,-8,-2,-127,-5,7,-3,-38,-7,1,-4,4, 
  /* [4][0][][] */ 4,-4,83,34,5,-15,-7,-12,7,-9,-4,-6,-81,0,-14,8,0,17,5,1,69,9,3,-1,-11,33,-10,53,3,-1,-1,106,6,6,3,2,16,-19,-5,-19,-4,-127,0,1,1,-5,1,-1, 
  /* [5][0][][] */ -11,39,2,-4,4,55,24,12,-15,27,7,60,28,0,-127,-1,0,13,-35,21,-6,7,-13,35,-18,-8,29,-5,-10,20,24,-14,50,27,-33,0,1,23,-47,17,26,-4,-5,30,26,50,25,24, 
  /* [6][0][][] */ -27,-63,-1,7,38,-38,-19,4,29,-32,-12,91,1,0,-127,39,0,-16,54,-18,-2,-3,26,-30,31,-6,-6,-20,52,-12,-7,3,91,-31,26,0,-10,-21,-66,-25,-12,-8,-1,-28,-17,-71,-14,-28, 
  /* [7][0][][] */ -112,-23,-15,7,127,18,64,38,11,-3,17,-30,-22,0,82,110,0,22,8,55,-11,-1,-31,48,20,-1,43,-9,58,62,65,-4,-10,-16,-24,-28,7,33,27,37,70,9,-25,-14,61,11,67,71, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.053592171519994736, 0.02727443166077137, 0.053843893110752106, 0.051822829991579056, 0.043427262455224991, 0.049156289547681808, 0.034020997583866119, 0.034431837499141693, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 69181, 53618, 60923, 43939, 1522, 14274, 4357, 31703, 25334, 35071, 30327, 3079, -46917, -127, 51537, 1996, -204, 44827, -613, 1695, -18251, 19021, 45267, 37309, -18385, 39298, 49091, 25964, -2339, 15106, -6171, -49568, 13257, 109577, 26571, 631, 65111, -529, 174071, -30123, 15448, -25135, 865, 109732, 60, 72221, 470, -21787, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.685537613928318e-05, 7.6134951086714864e-05, 0.00013599882367998362, 0.00013023818610236049, 0.00012463609164115041, 0.00016274438530672342, 0.00012854041415266693, 6.2943610828369856e-05, 8.6834697867743671e-05, 3.3188840461662039e-05, 7.5654075772035867e-05, 2.4922412194428034e-05, 0.00016779352154117078, 0.005541567225009203, 5.1618695579236373e-05, 0.00021417762036435306, 0.0027484172023832798, 2.2697455278830603e-05, 0.00011504581198096275, 0.00017283698252867907, 0.0001262019359273836, 0.0001665532763581723, 0.00013261850108392537, 3.57483331754338e-05, 7.1698894316796213e-05, 7.4057010351680219e-05, 3.2970518077490851e-05, 4.2144256440224126e-05, 0.00036807660944759846, 4.4089141738368198e-05, 4.5617995056090876e-05, 0.0001699910790193826, 0.00018345488933846354, 1.0541669325903058e-05, 9.0134722995571792e-05, 0.00020899994706269354, 1.4499631106446031e-05, 0.0004122353857383132, 2.6615531169227324e-05, 0.00010701147402869537, 5.2562620112439618e-05, 0.00015684054233133793, 0.00010491449938854203, 1.0753302376542706e-05, 0.00014091396587900817, 8.1666388723533601e-05, 0.00020849317661486566, 9.6822710474953055e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-23,-7,-17,6,-40,-79,-70,-24,-50,6,74,33,-71,113,-44,-113,-88,37,-6,-3,-70,-111,-79,-35,-125,-62,-25,70,14,96,27,-127,-92,-8,58,16,50,-127,77,-78,-13,107,-111,-3,-36,-87,111, 77,13,-28,-31,56,-127,-127,-81,60,-76,-114,117,38,-82,-1,62,-52,-115,57,7,11,-114,-127,-70,-3,-127,-121,-44,-55,19,-59,54,29,-127,63,88,12,75,-94,127,-127,7,122,-127,1,-23,-127,97, -32,44,5,-6,-66,-108,-58,-19,89,-8,-127,44,8,-71,-99,-12,-127,-25,26,11,-15,-73,-35,-25,-10,-31,-56,-14,-12,16,-24,9,105,-90,71,34,13,38,-6,17,-79,4,4,-82,-18,4,-56,15, 
  /* [0][1][][] */ -86,-127,-45,-42,-12,53,97,-105,-24,-108,-17,117,89,-64,26,-99,-121,-96,90,-76,40,-89,-105,-127,42,-123,-83,-42,127,-59,127,86,-43,-85,-16,88,-38,-76,-110,90,41,61,104,-112,-92,-118,83,120, 127,-83,-127,-127,127,40,93,-127,102,-127,-106,127,127,-14,-8,127,-60,-127,127,-127,127,-127,-121,-120,127,-102,-127,-127,-121,-127,-71,127,29,-114,127,127,-72,-127,-101,88,59,127,127,-117,-113,-127,126,127, -55,33,-62,-84,-121,-22,30,-38,127,-21,-74,34,57,-70,-26,-45,-37,-31,54,-72,57,-76,-40,-24,47,-8,-49,-66,14,-88,-36,20,29,-98,116,25,-36,-61,0,-13,36,54,8,-75,-58,-36,65,34, 
  /* [0][2][][] */ -61,-109,-30,-37,-2,34,-6,-37,-38,-60,-17,58,76,-127,-127,-66,-43,-22,65,75,54,-34,-12,-59,36,-60,-10,-61,76,27,75,63,110,-29,-39,-12,-95,35,-24,30,8,36,17,-56,96,-78,3,32, 87,-72,-83,-89,80,19,5,-49,46,-70,-32,52,84,-26,15,93,-24,-33,77,118,85,-51,-18,-58,96,-73,-20,-95,-51,39,-45,109,-17,-50,65,8,-127,49,-21,0,10,30,17,-64,127,-99,-12,39, -29,29,-39,-38,-81,-18,21,-12,60,-7,-12,31,32,-43,110,-30,-93,-8,31,58,78,-27,-2,-1,45,-1,-3,-68,-13,28,-21,38,-90,-41,65,4,-23,21,24,-37,5,34,-4,-13,63,-34,-4,16, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036913533695042133, 0.0032357352320104837, 0.0057799499481916428, 0.0055351229384541512, 0.0052970340475440025, 0.0069166361354291439, 0.005462967325001955, 0.0026751034893095493, 0.0036904746666550636, 0.0014105256414040923, 0.0032152982894331217, 0.0010592024773359299, 0.0071312244981527328, 0.23551659286022186, 0.0021937945857644081, 0.0091025484725832939, 0.1168077290058136, 0.00096464180387556553, 0.0048894467763602734, 0.0073455716483294964, 0.0053635821677744389, 0.0070785139687359333, 0.0056362864561378956, 0.0015193041181191802, 0.0030472029466181993, 0.0031474228017032146, 0.0014012469910085201, 0.0017911308677867055, 0.015643255785107613, 0.0018737884238362312, 0.0019387647043913603, 0.0072246207855641842, 0.0077968323603272438, 0.00044802093179896474, 0.0038307257927954197, 0.0088824974372982979, 0.00061623431975021958, 0.017520003020763397, 0.0011311600683256984, 0.0045479875989258289, 0.0022339113056659698, 0.0066657229326665401, 0.0044588660821318626, 0.00045701532508246601, 0.0059888432733714581, 0.0034708215389400721, 0.0088609596714377403, 0.0041149649769067764, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4038, 55, 7777, 7504, 7335, 6534, 11524, -46, -33, -330, 2340, 363, 12189, -84546976, 2506, 22942, -68250704, -117, -281, 15004, 4793, -17, -17, 424, 3706, -727, 71, 678, 5113, 1845, 2498, 14140, 3402, 386, 275, -2796, 420, 2054, -156, 14509, 2291, 9668, -267, -103, 15581, 44, 13915, 3432, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00051835802150890231, 0.00046945459325797856, 0.00039825009298510849, 0.00025871032266877592, 0.0002726077800616622, 0.00031712715281173587, 0.00032565512810833752, 0.0011929183965548873, 0.00034831278026103973, 0.0022890344262123108, 0.00063945126021280885, 0.002138558542355895, 0.00018256726616527885, 1.9182668786754675e-09, 0.0010035231243818998, 0.00014513453061226755, 1.9182668786754675e-09, 0.0063217040151357651, 0.00042733401642180979, 0.00025751200155355036, 0.00024582890910096467, 0.0044624502770602703, 0.0003413118829485029, 0.0015380320837721229, 0.0010356864659115672, 0.00074991479050368071, 0.0022724031005054712, 0.0017905050190165639, 0.00023521015828009695, 0.0015661249635741115, 0.0011955800000578165, 0.0001627149322303012, 0.00021848437609151006, 0.0083396695554256439, 0.00041487699490971863, 0.00042794825276359916, 0.0037010745145380497, 0.00058150076074525714, 0.0027088669594377279, 0.00023513601627200842, 0.0012295107590034604, 0.00022184102272149175, 0.0003911235835403204, 0.0079507390037178993, 0.00032315251883119345, 0.00050315517000854015, 0.00020271740504540503, 0.00024068397760856897, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 6,-127,48,-35,25,-23,-51,21, 
  /* [1][0][][] */ 55,54,-17,-75,24,-18,-80,127, 
  /* [2][0][][] */ 18,16,-39,127,54,120,39,93, 
  /* [3][0][][] */ 90,75,-80,127,-111,-11,-10,5, 
  /* [4][0][][] */ -33,-107,72,17,16,24,-37,-127, 
  /* [5][0][][] */ 29,4,-33,51,-1,-32,32,127, 
  /* [6][0][][] */ 46,9,-108,-63,127,-15,55,-24, 
  /* [7][0][][] */ 127,9,2,-26,43,-2,92,-72, 
  /* [8][0][][] */ 13,-95,4,106,-26,28,-13,-127, 
  /* [9][0][][] */ 123,-127,9,-1,-4,-3,-124,78, 
  /* [10][0][][] */ -127,-32,-88,20,25,-2,-124,38, 
  /* [11][0][][] */ -24,-41,-8,-91,-127,-22,57,-3, 
  /* [12][0][][] */ 3,25,-21,67,-82,-25,52,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -15,-35,1,15,72,127,41,49, 
  /* [15][0][][] */ 55,3,11,-127,65,20,-39,89, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ -3,19,127,27,-28,-16,24,29, 
  /* [18][0][][] */ 79,-109,29,31,-5,22,-127,-12, 
  /* [19][0][][] */ -127,-21,34,74,-73,-88,-116,76, 
  /* [20][0][][] */ 27,22,-36,120,-34,-127,-4,55, 
  /* [21][0][][] */ 46,31,127,16,-12,-10,74,6, 
  /* [22][0][][] */ -75,-18,-127,-2,3,14,-77,6, 
  /* [23][0][][] */ -94,127,-14,-18,13,-14,123,-75, 
  /* [24][0][][] */ 4,-68,-51,86,-12,-65,81,127, 
  /* [25][0][][] */ 13,24,35,21,127,77,-74,-44, 
  /* [26][0][][] */ -72,-28,-127,-1,9,17,-91,-3, 
  /* [27][0][][] */ -25,-2,-18,30,-54,127,96,55, 
  /* [28][0][][] */ -15,-28,-29,37,45,127,63,76, 
  /* [29][0][][] */ 99,36,127,-22,3,-37,99,-34, 
  /* [30][0][][] */ -76,127,-21,-34,4,-12,101,-36, 
  /* [31][0][][] */ -34,-73,-20,7,49,-90,116,127, 
  /* [32][0][][] */ 1,14,-48,127,13,92,73,127, 
  /* [33][0][][] */ 10,76,-2,-99,9,-14,-10,127, 
  /* [34][0][][] */ -20,80,-5,-90,31,-16,19,127, 
  /* [35][0][][] */ 127,14,-19,-72,28,-21,117,-74, 
  /* [36][0][][] */ -106,-18,24,38,-42,9,-127,62, 
  /* [37][0][][] */ -9,-29,-4,5,17,127,40,32, 
  /* [38][0][][] */ 8,10,4,80,127,-11,-10,48, 
  /* [39][0][][] */ 9,33,49,-127,14,6,-45,107, 
  /* [40][0][][] */ 102,22,127,16,4,-7,77,0, 
  /* [41][0][][] */ -5,-26,-35,86,53,127,71,100, 
  /* [42][0][][] */ -86,-6,127,11,-36,8,-34,76, 
  /* [43][0][][] */ -4,-49,12,103,-11,1,10,-127, 
  /* [44][0][][] */ 50,13,-30,-108,109,-88,-18,-127, 
  /* [45][0][][] */ -89,127,-3,-60,22,-2,73,-45, 
  /* [46][0][][] */ -127,-42,45,42,-8,59,-112,59, 
  /* [47][0][][] */ 66,10,97,-8,0,-26,127,4, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010638664243742824, 0.00096349813975393772, 0.000817359599750489, 0.00053097127238288522, 0.0005594941321760416, 0.00065086467657238245, 0.00066836731275543571, 0.002448319224640727, 0.00071486941305920482, 0.0046979631297290325, 0.0013123955577611923, 0.0043891300447285175, 0.0003746969741769135, 3.937008052901092e-09, 0.0020596084650605917, 0.00029787086532451212, 3.937008052901092e-09, 0.01297452487051487, 0.00087705079931765795, 0.00052851188229396939, 0.00050453376024961472, 0.0091586336493492126, 0.0007005009101703763, 0.0031566228717565536, 0.0021256199106574059, 0.0015391083434224129, 0.0046638296917080879, 0.0036747925914824009, 0.0004827400844078511, 0.0032142798881977797, 0.0024537816643714905, 0.00033395251375623047, 0.00044841246563009918, 0.017116151750087738, 0.00085148430662229657, 0.00087831146083772182, 0.0075960028916597366, 0.0011934591457247734, 0.0055596181191504002, 0.0004825879295822233, 0.0025234203785657883, 0.0004553015751298517, 0.00080273335333913565, 0.01631791889667511, 0.00066323101054877043, 0.0010326644405722618, 0.00041605267324484885, 0.00049397442489862442, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 3302, -40082, -8643, -9780, -30051, -3993, -30342, -29049, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0023901755921542645, 0.002266785828396678, 0.002522291848435998, 0.0012214918388053775, 0.0010668454924598336, 0.001949894824065268, 0.0014422255335375667, 0.00095742853591218591, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-21,-2,-10,122,-1,-5,-3,-7,-127,-85,-5,0,116,-8,0, 
  /* [1][0][][] */ 0,-25,2,88,68,7,19,-2,-5,-8,127,-41,0,32,-14,0, 
  /* [2][0][][] */ 0,-1,2,-11,-58,6,12,-1,-1,4,-18,3,0,127,-7,0, 
  /* [3][0][][] */ 0,-10,-20,-127,75,18,67,17,-7,62,-4,33,0,-1,11,0, 
  /* [4][0][][] */ 0,45,-20,43,-75,32,127,9,8,-75,23,1,0,-11,7,0, 
  /* [5][0][][] */ 0,-10,-1,0,-26,-24,-7,11,3,9,-4,-48,0,-5,127,0, 
  /* [6][0][][] */ 0,8,0,10,50,-14,-18,2,-1,-102,119,74,0,127,64,0, 
  /* [7][0][][] */ 0,6,-17,127,6,0,21,13,-4,79,-52,70,0,1,40,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.10158246010541916, 0.09633839875459671, 0.10719740390777588, 0.05191340297460556, 0.045340932905673981, 0.082870528101921082, 0.061294585466384888, 0.040690712630748749, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 35030, 155977, 12095, 12689, 94403, 14429, 55561, -4336, 7786, 29782, 14373, -445, 27541, 12492, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 7.5305026257410645e-05, 2.5886341973091476e-05, 0.00028480522450990975, 0.00014900333189871162, 3.515696880640462e-05, 0.00035863649100065231, 7.0168942329473794e-05, 2.4056904294411652e-05, 0.00025071794516406953, 0.00019351813534740359, 0.00071632076287642121, 0.00072724185883998871, 0.00022081086353864521, 0.00015974149573594332, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,39,-67,80,-76,-86,-3,-8,28,-127,4,54,-73, 51,24,-127,127,127,-127,127,-127,-81,127,-127,52,-105,5,127,-25, 24,-25,88,-2,-73,66,-95,78,-90,-28,4,-17,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-24,14,-44,15,-29,14,-27,0,2,-111,-49,8,-29,-14, -78,-42,-58,-14,-8,-26,8,-27,-107,-89,21,-12,-104,-127,1,23, 14,1,62,2,2,32,-25,34,-122,6,-2,0,-21,12,-4,43, 
  /* [0][2][][] */ -115,-74,65,2,-6,38,-40,52,-79,0,-1,5,40,2,-27,23, 23,-5,28,-2,-27,39,-34,21,-127,-13,0,86,-58,0,-28,-111, 21,-8,16,0,4,13,9,23,-116,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0032004634849727154, 0.0011001694947481155, 0.012104221619665623, 0.0063326414674520493, 0.0014941710978746414, 0.015242050401866436, 0.0029821798671036959, 0.0010224183788523078, 0.010655512101948261, 0.0082245208323001862, 0.030443631112575531, 0.030907778069376945, 0.0093844616785645485, 0.0067890132777392864, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 19540, -49890, -1048, 82761, 27728, 99909, 22361, -117644, 14331, 27549, 788293, -1073741824, 48162, 32374, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00026034718030132353, 0.00037309166509658098, 5.4574411478824914e-05, 2.9871685910620727e-05, 0.00021138854208402336, 4.2900199332507327e-05, 0.00028743967413902283, 1.0548829777690116e-05, 6.1394130170810968e-05, 0.00010980241495417431, 7.668782927794382e-06, 1.1533876076441629e-09, 7.875155279180035e-05, 6.0084363212808967e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 50,-11,28, 2,-32,15, -112,-127,-60, 
  /* [1][1][][] */ 6,-16,-4, -14,-6,-4, 14,-31,11, 
  /* [1][2][][] */ 2,10,-5, 5,7,-1, 53,-10,19, 
  /* [2][0][][] */ 22,-24,-30, 76,116,-19, 41,-51,-9, 
  /* [2][1][][] */ -5,-6,-25, 64,127,-51, 20,-12,-21, 
  /* [2][2][][] */ 55,-75,12, 89,-44,-30, 44,-56,12, 
  /* [3][0][][] */ 9,36,7, 27,92,24, -6,2,-5, 
  /* [3][1][][] */ 20,35,4, 61,127,29, -20,-24,0, 
  /* [3][2][][] */ -5,-6,-8, 26,31,8, -6,-8,1, 
  /* [4][0][][] */ -6,64,-24, -17,82,-21, -35,23,-10, 
  /* [4][1][][] */ -2,93,28, -7,127,14, 2,66,-20, 
  /* [4][2][][] */ 4,47,3, 1,88,-10, -50,7,-3, 
  /* [5][0][][] */ 3,-12,-122, -7,-12,-102, -5,20,-17, 
  /* [5][1][][] */ -2,-59,-127, -7,-62,-111, -1,3,-7, 
  /* [5][2][][] */ -4,1,-9, 4,-9,3, 6,11,6, 
  /* [6][0][][] */ 16,-66,29, 33,-90,30, 6,-23,8, 
  /* [6][1][][] */ 24,-97,51, 48,-127,60, 6,-29,16, 
  /* [6][2][][] */ 20,-31,14, 13,-41,25, -5,10,6, 
  /* [7][0][][] */ -11,13,7, -93,-46,1, -14,19,3, 
  /* [7][1][][] */ -5,-19,1, -127,-109,-12, -3,-17,2, 
  /* [7][2][][] */ -23,16,-10, -22,-6,-6, -27,8,-7, 
  /* [8][0][][] */ 57,65,44, 74,77,59, 35,42,31, 
  /* [8][1][][] */ 20,31,13, 41,45,30, 5,14,3, 
  /* [8][2][][] */ 73,114,46, 90,127,61, 60,94,39, 
  /* [9][0][][] */ -18,5,21, -11,1,12, -4,1,-8, 
  /* [9][1][][] */ 91,117,-5, 67,127,19, -19,13,24, 
  /* [9][2][][] */ -29,-27,13, 1,-34,-2, 15,7,-14, 
  /* [10][0][][] */ -24,-86,-17, 36,94,22, -7,-15,-1, 
  /* [10][1][][] */ -59,-107,-12, 81,127,16, -16,-29,1, 
  /* [10][2][][] */ -31,-21,4, 38,21,-10, -7,-3,9, 
  /* [11][0][][] */ -28,-36,8, -2,-55,13, -7,-127,-64, 
  /* [11][1][][] */ -56,-52,-9, -47,-75,-33, -34,-82,-67, 
  /* [11][2][][] */ -25,-63,-107, 114,122,52, -61,-5,-72, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-100,-17, -61,-114,-25, -8,-19,-5, 
  /* [13][1][][] */ 64,114,16, 60,127,25, 9,14,11, 
  /* [13][2][][] */ -7,-21,4, 2,-21,-1, 1,2,-3, 
  /* [14][0][][] */ 51,-9,-31, 81,-33,-47, 37,-12,-15, 
  /* [14][1][][] */ 92,-23,-69, 127,-50,-85, 63,-21,-31, 
  /* [14][2][][] */ 65,-1,-35, 82,-17,-43, 38,5,-5, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.066388525068759918, 0.095138370990753174, 0.013916473835706711, 0.0076172794215381145, 0.053904075175523758, 0.010939550586044788, 0.073297113180160522, 0.0026899513322860003, 0.015655502676963806, 0.027999613434076309, 0.0019555394537746906, 2.9411381774480105e-07, 0.020081644877791405, 0.015321511775255203, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.48723974823951721, } };
const TfArray<1, int> quant46_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.37891861796379089, } };
const TfArray<1, int> quant50_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.4658663272857666, } };
const TfArray<1, int> quant53_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.53150254487991333, } };
const TfArray<1, int> quant54_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.26886692643165588, } };
const TfArray<1, int> quant58_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.20511606335639954, } };
const TfArray<1, int> quant61_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.25214675068855286, } };
const TfArray<1, int> quant62_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.24000579118728638, } };
const TfArray<1, int> quant65_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.32990166544914246, } };
const TfArray<1, int> quant66_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.051244299858808517, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.15646150708198547, } };
const TfArray<1, int> quant69_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
